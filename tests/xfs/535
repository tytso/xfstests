#! /bin/bash
# SPDX-License-Identifier: GPL-2.0
# Copyright (c) 2021 Chandan Babu R.  All Rights Reserved.
#
# FS QA Test 535
#
# Verify that XFS does not cause inode fork's extent count to overflow when
# writing to a shared extent.
. ./common/preamble
_begin_fstest auto quick reflink

# Import common functions.
. ./common/filter
. ./common/reflink
. ./common/inject

# real QA test starts here

_supported_fs xfs
_require_scratch
_require_scratch_reflink
_require_xfs_debug
_require_xfs_io_command "reflink"
_require_xfs_io_command "funshare"
_require_xfs_io_error_injection "reduce_max_iextents"

echo "Format and mount fs"
_scratch_mkfs_sized $((512 * 1024 * 1024)) >> $seqres.full
_scratch_mount >> $seqres.full

bsize=$(_get_block_size $SCRATCH_MNT)

nr_blks=15

srcfile=${SCRATCH_MNT}/srcfile
dstfile=${SCRATCH_MNT}/dstfile

touch $srcfile
touch $dstfile

echo "Inject reduce_max_iextents error tag"
_scratch_inject_error reduce_max_iextents 1

echo "Create a \$srcfile having an extent of length $nr_blks blocks"
$XFS_IO_PROG -f -c "pwrite -b $((nr_blks * bsize))  0 $((nr_blks * bsize))" \
       -c fsync $srcfile  >> $seqres.full

echo "* Write to shared extent"

echo "Share the extent with \$dstfile"
_reflink $srcfile $dstfile >> $seqres.full

echo "Buffered write to every other block of \$dstfile's shared extent"
for i in $(seq 1 2 $((nr_blks - 1))); do
	$XFS_IO_PROG -f -s -c "pwrite $((i * bsize)) $bsize" $dstfile \
	       >> $seqres.full 2>&1
	[[ $? != 0 ]] && break
done

echo "Verify \$dstfile's extent count"
nextents=$(_xfs_get_fsxattr nextents $dstfile)
if (( $nextents > 10 )); then
	echo "Extent count overflow check failed: nextents = $nextents"
	exit 1
fi

echo "Disable reduce_max_iextents error tag"
_scratch_inject_error reduce_max_iextents 0

rm $dstfile

echo "* Funshare shared extent"

touch $dstfile

echo "Inject reduce_max_iextents error tag"
_scratch_inject_error reduce_max_iextents 1

echo "Share the extent with \$dstfile"
_reflink $srcfile $dstfile >> $seqres.full

echo "Funshare every other block of \$dstfile's shared extent"
for i in $(seq 1 2 $((nr_blks - 1))); do
	$XFS_IO_PROG -f -s -c "funshare $((i * bsize)) $bsize" $dstfile \
	       >> $seqres.full 2>&1
	[[ $? != 0 ]] && break
done

echo "Verify \$dstfile's extent count"
nextents=$(_xfs_get_fsxattr nextents $dstfile)
if (( $nextents > 10 )); then
	echo "Extent count overflow check failed: nextents = $nextents"
	exit 1
fi

# success, all done
status=0
exit
 
