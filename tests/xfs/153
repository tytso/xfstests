#! /bin/bash
# SPDX-License-Identifier: GPL-2.0+
#
# Copyright (c) 2021 Christian Brauner <christian.brauner@ubuntu.com>
# All Rights Reserved.
#
# FS QA Test No. 153
#
# Exercises basic XFS quota functionality
#       uquota, gquota, uqnoenforce, gqnoenforce
#
. ./common/preamble
_begin_fstest auto quick quota idmapped

# Import common functions.
. ./common/filter
. ./common/quota

# Override the default cleanup function.
_cleanup()
{
	cd /
	_scratch_unmount 2>/dev/null
	rm -f $tmp.*
}

# real QA test starts here
_supported_fs xfs

cp /dev/null $seqres.full
chmod a+rwx $seqres.full	# arbitrary users will write here

_require_scratch
_require_xfs_quota
_require_user fsgqa
_require_idmapped_mounts
_require_test_program "idmapped-mounts/mount-idmapped"

_scratch_mkfs >/dev/null 2>&1
_scratch_mount
bsize=$(_get_file_block_size $SCRATCH_MNT)
_scratch_unmount

bsoft=$(( 200 * $bsize ))
bhard=$(( 1000 * $bsize ))
isoft=4
ihard=10

# The actual point at which limit enforcement takes place for the
# hard block limit is variable depending on filesystem blocksize,
# and iosize.  What we want to test is that the limit is enforced
# (ie. blksize less than limit but not unduly less - ~85% is kind)
# nowadays we actually get much closer to the limit before EDQUOT.
#
_filter_and_check_blks()
{
	perl -npe '
		if (/^\#'$id'\s+(\d+)/ && '$enforce') {
			$maximum = '$bhard';
			$minimum = '$bhard' * 85/100;
			$used = $1 * 1024;
			if (($used < $minimum || $used > $maximum) && '$noextsz') {
				printf(" URK %d: %d is out of range! [%d,%d]\n",
					'$id', $used, $minimum, $maximum);
			}
			s/^(\#'$id'\s+)(\d+)/\1 =OK=/g;
		}
	' | _filter_quota_report
}

run_tests()
{
	_scratch_mkfs_xfs | _filter_mkfs 2>$tmp.mkfs
	cat $tmp.mkfs >>$seqres.full

	# keep the blocksize and data size for dd later
	. $tmp.mkfs

	_qmount

	# Figure out whether we're doing large allocations
	# (bail out if they're so large they stuff the test up)
	_test_inode_flag extsz-inherit $SCRATCH_MNT
	noextsz=$?
	extsize=`_test_inode_extsz $SCRATCH_MNT`
	[ $extsize -ge 512000 ] && \
		_notrun "Extent size hint is too large ($extsize bytes)"

	_qsetup $1

	echo "Using type=$type id=$id" >>$seqres.full

	$XFS_QUOTA_PROG -x -c "warn -$type 65535 -d" $SCRATCH_DEV

	echo
	echo "*** report no quota settings" | tee -a $seqres.full
	$XFS_QUOTA_PROG -D $tmp.projects -P $tmp.projid -x \
		-c "repquota -birnN -$type" $SCRATCH_DEV |
		_filter_quota_report | LC_COLLATE=POSIX sort -ru

	echo
	echo "*** report initial settings" | tee -a $seqres.full
	_scratch_mount_idmapped $type $id
	_file_as_id $SCRATCH_MNT/initme 0 $type 1024 0
	_scratch_umount_idmapped
	echo "ls -l $SCRATCH_MNT" >>$seqres.full
	ls -l $SCRATCH_MNT >>$seqres.full
	$XFS_QUOTA_PROG -D $tmp.projects -P $temp.projid -x \
		-c "limit -$type bsoft=${bsoft} bhard=${bhard} $id" \
		-c "limit -$type isoft=$isoft ihard=$ihard $id" \
		$SCRATCH_DEV
	$XFS_QUOTA_PROG -D $tmp.projects -P $tmp.projid -x \
		-c "repquota -birnN -$type" $SCRATCH_DEV |
		_filter_quota_report | LC_COLLATE=POSIX sort -ru

	echo
	echo "*** push past the soft inode limit" | tee -a $seqres.full
	_scratch_mount_idmapped $type $id
	_file_as_id $SCRATCH_MNT/softie1 0 $type 1024 0
	_file_as_id $SCRATCH_MNT/softie2 0 $type 1024 0
	_file_as_id $SCRATCH_MNT/softie3 0 $type 1024 0
	_file_as_id $SCRATCH_MNT/softie4 0 $type 1024 0
	_scratch_umount_idmapped
	_qmount
	$XFS_QUOTA_PROG -x -c "warn -i -$type 0 $id" $SCRATCH_DEV
	$XFS_QUOTA_PROG -D $tmp.projects -P $tmp.projid -x \
		-c "repquota -birnN -$type" $SCRATCH_DEV |
		_filter_quota_report | LC_COLLATE=POSIX sort -ru

	echo
	echo "*** push past the soft block limit" | tee -a $seqres.full
	_scratch_mount_idmapped $type $id
	_file_as_id $SCRATCH_MNT/softie 0 $type $bsize 300
	_scratch_umount_idmapped
	_qmount
	$XFS_QUOTA_PROG -x -c "warn -i -$type 0 $id" \
		-c "warn -b -$type 0 $id" $SCRATCH_DEV
	$XFS_QUOTA_PROG -D $tmp.projects -P $tmp.projid -x \
		-c "repquota -birnN -$type" $SCRATCH_DEV |
		_filter_quota_report | LC_COLLATE=POSIX sort -ru

	echo
	# Note: for quota accounting (not enforcement), EDQUOT is not expected
	echo "*** push past the hard inode limit (expect EDQUOT)" | tee -a $seqres.full
	for i in 1 2 3 4 5 6 7 8 9 10 11 12
	do
		_scratch_mount_idmapped $type $id
		_file_as_id $SCRATCH_MNT/hard$i 0 $type 1024 0
		_scratch_umount_idmapped
	done
	_qmount
	$XFS_QUOTA_PROG -x  -c "warn -b -$type 0 $id" \
		-c "warn -i -$type 0 $id" $SCRATCH_DEV
	$XFS_QUOTA_PROG -D $tmp.projects -P $tmp.projid -x \
		-c "repquota -birnN -$type" $SCRATCH_DEV |
		_filter_quota_report | LC_COLLATE=POSIX sort -ru

	echo
	# Note: for quota accounting (not enforcement), EDQUOT is not expected
	echo "*** push past the hard block limit (expect EDQUOT)" | tee -a $seqres.full
	_scratch_mount_idmapped $type $id
	_file_as_id $SCRATCH_MNT/softie 0 $type $bsize 1200
	_scratch_umount_idmapped
	echo "ls -l $SCRATCH_MNT" >>$seqres.full
	ls -l $SCRATCH_MNT >>$seqres.full
	_qmount
	$XFS_QUOTA_PROG -x -c "warn -b -$type 0 $id" $SCRATCH_DEV
	$XFS_QUOTA_PROG -D $tmp.projects -P $tmp.projid -x \
		-c "repquota -birnN -$type" $SCRATCH_DEV |
		_filter_and_check_blks | LC_COLLATE=POSIX sort -ru

	echo
	echo "*** unmount"
	_scratch_unmount

}

cat >$tmp.projects <<EOF
1:$SCRATCH_MNT
EOF

cat >$tmp.projid <<EOF
root:0
scrach:1
EOF

projid_file="$tmp.projid"

echo "*** user"
_qmount_option "uquota"
run_tests u

echo "*** group"
_qmount_option "gquota"
run_tests g

echo "*** uqnoenforce"
_qmount_option "uqnoenforce"
run_tests uno

echo "*** gqnoenforce"
_qmount_option "gqnoenforce"
run_tests gno

# success, all done
status=0
exit
