#! /bin/bash
# SPDX-License-Identifier: GPL-2.0-or-later
# Copyright (c) 2021 Oracle.  All Rights Reserved.
#
# FS QA Test No. 767
#
# Functional testing for realtime quotas.

. ./common/test_names
_set_seq_and_groups auto quick quota realtime

trap "_cleanup; exit \$status" 0 1 2 3 15

_cleanup()
{
	cd /
	rm -f $tmp.*
}

# get standard environment, filters and checks
. ./common/rc
. ./common/quota
. ./common/filter

# real QA test starts here
_supported_fs xfs
_require_test_program "punch-alternating"
_require_scratch
_require_user

rm -f $seqres.full

echo "Format filesystem" | tee -a $seqres.full
_scratch_mkfs > $seqres.full
_qmount_option 'usrquota'
_qmount
_require_rtquota $SCRATCH_DEV $SCRATCH_RTDEV

# Make sure all our files are on the rt device
_xfs_force_bdev realtime $SCRATCH_MNT
chmod a+rwx $SCRATCH_MNT

# Record rt geometry
bmbt_blksz=$(_get_block_size $SCRATCH_MNT)
file_blksz=$(_get_file_block_size $SCRATCH_MNT)
rextsize=$((file_blksz / bmbt_blksz))
echo "bmbt_blksz $bmbt_blksz" >> $seqres.full
echo "file_blksz $file_blksz" >> $seqres.full
echo "rextsize $rextsize" >> $seqres.full

note() {
	echo -e "\n$@" | tee -a $seqres.full
}

# Report on the user's block and rt block usage, soft limit, hard limit, and
# warning count for rt volumes
report_rtusage() {
	local user="$1"
	local timeout_arg="$2"
	local print_timeout=0

	test -z "$user" && user=$qa_user
	test -n "$timeout_arg" && print_timeout=1

	$XFS_QUOTA_PROG -c "quota -u -r -n -N $user" $SCRATCH_MNT | \
		sed -e 's/ days/_days/g' >> $seqres.full

	$XFS_QUOTA_PROG -c "quota -u -r -n -N $user" $SCRATCH_MNT | \
		sed -e 's/ days/_days/g' | \
		awk -v user=$user -v print_timeout=$print_timeout -v file_blksz=$file_blksz \
			'{printf("%s[real] %d %d %d %d %s\n", user, $2 * 1024 / file_blksz, $3 * 1024 / file_blksz, $4 * 1024 / file_blksz, $5, print_timeout ? $6 : "---");}'
}

note "Write 128rx to root"
$XFS_IO_PROG -f -c "pwrite 0 $((128 * file_blksz))" $SCRATCH_MNT/file1 > /dev/null
chmod a+r $SCRATCH_MNT/file1
sync
report_rtusage 0

note "Write 64rx to root, 4444, and 5555."
$XFS_IO_PROG -f -c "pwrite 0 $((64 * file_blksz))" $SCRATCH_MNT/file3.5555 > /dev/null
chown 5555 $SCRATCH_MNT/file3.5555
$XFS_IO_PROG -f -c "pwrite 0 $((64 * file_blksz))" $SCRATCH_MNT/file3.4444 > /dev/null
chown 4444 $SCRATCH_MNT/file3.4444
$XFS_IO_PROG -f -c "pwrite 0 $((64 * file_blksz))" $SCRATCH_MNT/file3 > /dev/null
sync
report_rtusage 0
report_rtusage 4444
report_rtusage 5555

note "Move 64rx from root to 5555"
chown 5555 $SCRATCH_MNT/file3
report_rtusage 0
report_rtusage 4444
report_rtusage 5555

note "Move 64rx from 5555 to 4444"
chown 4444 $SCRATCH_MNT/file3
report_rtusage 0
report_rtusage 4444
report_rtusage 5555

note "Set hard limit of 1024rx and check enforcement"
$XFS_QUOTA_PROG -x -c "limit -u rtbhard=$((1024 * file_blksz)) $qa_user" $SCRATCH_MNT
su $qa_user -c "$XFS_IO_PROG -f -c 'pwrite 0 $((2048 * file_blksz))' $SCRATCH_MNT/file2"
report_rtusage

note "Set soft limit of 512rx and check warning enforcement"
rm -f $SCRATCH_MNT/file2 $SCRATCH_MNT/file2.1
$XFS_QUOTA_PROG -x -c "limit -u rtbsoft=$((512 * file_blksz)) rtbhard=0 $qa_user" $SCRATCH_MNT
$XFS_QUOTA_PROG -x -c "warn -u -r -d 3" -c "timer -u -r -d 11d" $SCRATCH_MNT
$XFS_QUOTA_PROG -x -c 'state -u' $SCRATCH_MNT >> $seqres.full

su $qa_user -c "$XFS_IO_PROG -f -c 'pwrite 0 $((512 * file_blksz))' $SCRATCH_MNT/file2" > /dev/null
report_rtusage

for i in 0 1 2 3 4; do
	echo "Bump warning count to $((i + 1))."
	su $qa_user -c "$XFS_IO_PROG -f -c 'pwrite -b $file_blksz $((i * file_blksz)) $file_blksz' $SCRATCH_MNT/file2.1" > /dev/null
	report_rtusage
done

note "Set soft limit of 512rx and check timelimit enforcement"
rm -f $SCRATCH_MNT/file2 $SCRATCH_MNT/file2.1
$XFS_QUOTA_PROG -x -c "limit -u rtbsoft=$((512 * file_blksz)) rtbhard=0 $qa_user" $SCRATCH_MNT
$XFS_QUOTA_PROG -x -c "warn -u -r -d 999" -c "timer -u -r -d 2" $SCRATCH_MNT
$XFS_QUOTA_PROG -x -c 'state -u' $SCRATCH_MNT >> $seqres.full

su $qa_user -c "$XFS_IO_PROG -f -c 'pwrite 0 $((512 * file_blksz))' $SCRATCH_MNT/file2" > /dev/null
report_rtusage

overflow=$(date +%s)
su $qa_user -c "$XFS_IO_PROG -f -c 'pwrite -b $file_blksz 0 $file_blksz' $SCRATCH_MNT/file2.1" > /dev/null
report_rtusage
sleep 1
echo "Try again after 1s"
su $qa_user -c "$XFS_IO_PROG -f -c 'pwrite -b $file_blksz $file_blksz $file_blksz' $SCRATCH_MNT/file2.1" > /dev/null
report_rtusage
sleep 2
echo "Try again after 3s"
su $qa_user -c "$XFS_IO_PROG -f -c 'pwrite -b $file_blksz $((2 * file_blksz)) $file_blksz' $SCRATCH_MNT/file2.1" > /dev/null
report_rtusage

note "Extend time limits and warnings"
rm -f $SCRATCH_MNT/file2 $SCRATCH_MNT/file2.1
$XFS_QUOTA_PROG -x -c "limit -u rtbsoft=$((512 * file_blksz)) rtbhard=0 $qa_user" $SCRATCH_MNT
$XFS_QUOTA_PROG -x -c "warn -u -r -d 7" -c "timer -u -r -d 49h" $SCRATCH_MNT
$XFS_QUOTA_PROG -x -c 'state -u' $SCRATCH_MNT >> $seqres.full

su $qa_user -c "$XFS_IO_PROG -f -c 'pwrite 0 $((512 * file_blksz))' $SCRATCH_MNT/file2" > /dev/null
report_rtusage $qa_user want_timeout

su $qa_user -c "$XFS_IO_PROG -f -c 'pwrite -b $file_blksz 0 $file_blksz' $SCRATCH_MNT/file2.1" > /dev/null
report_rtusage $qa_user want_timeout

$XFS_QUOTA_PROG -x -c "warn -u -r 77 $qa_user" -c "timer -u -r 73h $qa_user" $SCRATCH_MNT

su $qa_user -c "$XFS_IO_PROG -f -c 'pwrite -b $file_blksz $file_blksz $file_blksz' $SCRATCH_MNT/file2.1" > /dev/null
report_rtusage $qa_user want_timeout

note "Test quota applied to bmbt"

# Testing quota enforcement for bmbt shape changes is tricky.  The block
# reservation will be for enough blocks to handle the maximal btree split.
# This is (approximately) 9 blocks no matter the size of the existing extent
# map structure, so we set the hard limit to one more than this quantity.
#
# However, that means that we need to make a file of at least twice that size
# to ensure that we create enough extent records even in the rextsize==1 case
# where punching doesn't just create unwritten records.
#
# Unfortunately, it's very difficult to predict when exactly the EDQUOT will
# come down, so we just look for the error message.
extent_records=$(( (25 * bmbt_blksz) / 16))
echo "extent_records $extent_records" >> $seqres.full

rm -f $SCRATCH_MNT/file2
$XFS_QUOTA_PROG -x -c "limit -u rtbsoft=0 rtbhard=0 $qa_user" $SCRATCH_MNT
$XFS_QUOTA_PROG -x -c "limit -u bhard=$((bmbt_blksz * 10)) bsoft=0 $qa_user" $SCRATCH_MNT
$XFS_QUOTA_PROG -x -c 'state -u' $SCRATCH_MNT >> $seqres.full
$XFS_IO_PROG -f -c "pwrite -S 0x58 -b 64m 0 $((extent_records * file_blksz))" $SCRATCH_MNT/file2 > /dev/null
sync
chown $qa_user $SCRATCH_MNT/file2
$here/src/punch-alternating -s $rextsize -i $((2 * rextsize)) $SCRATCH_MNT/file2 2>&1 | _filter_scratch

$XFS_QUOTA_PROG -c "quota -u -r -n -N $qa_user" -c "quota -u -b -n -N $qa_user" $SCRATCH_MNT >> $seqres.full
$XFS_IO_PROG -c "bmap -e -l -p -v" $SCRATCH_MNT/file2 >> $seqres.full

# success, all done
$XFS_QUOTA_PROG -x -c 'report -a -u' -c 'report -a -u -r' $SCRATCH_MNT >> $seqres.full
ls -latr $SCRATCH_MNT >> $seqres.full
status=0
exit
