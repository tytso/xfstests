#! /bin/bash
# SPDX-License-Identifier: GPL-2.0
# Copyright (c) 2000-2002 Silicon Graphics, Inc.  All Rights Reserved.
#
# FS QA Test No. 031
#
# exercise xfs_repair - ensure repeated use doesn't corrupt
#
seqfull=$0
. ./common/preamble
_begin_fstest repair mkfs auto quick

# Import common functions.
. ./common/repair
. ./common/filter

_check_repair()
{
	echo "Repairing, round 0" >> $seqres.full
	_scratch_xfs_repair 2>&1 | _filter_repair | tee -a $seqres.full >$tmp.0
	for i in 1 2 3 4
	do
		echo "Repairing, iteration $i" | tee -a $seqres.full
		_scratch_xfs_repair 2>&1 | _filter_repair >$tmp.$i
		diff $tmp.0 $tmp.$i >> $seqres.full
		if [ $? -ne 0 ]; then
			echo "ERROR: repair round $i differs to round 0 (see $seqres.full)" | tee -a $seqres.full
			break
		fi
		# echo all interesting stuff...
		perl -ne '
			s/(rebuilding directory inode) (\d+)/\1 INO/g;
			s/internal log/<TYPEOF> log/g;
			s/external log on \S+/<TYPEOF> log/g;
			/^\S+/ && print;
		' $tmp.$i
	done
	echo
}

# prototype file to create various directory forms
_create_proto()
{
	total=$1
	count=0

	# take inode size into account for non-shortform directories...
	[ $total -gt 0 ] && total=`expr $total \* $isize / 512`

	cat >$tmp.proto <<EOF
DUMMY1
0 0
: root directory
d--777 3 1
lost+found d--755 3 1
$
EOF

	while [ $count -lt $total ]
	do
		let count=$count+1
		cat >>$tmp.proto <<EOF
${count}_of_${total}_xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx ---755 3 1 /bin/true
EOF
	done
	echo '$' >>$tmp.proto
}

# real QA test starts here
_supported_fs xfs

_require_scratch
_require_no_large_scratch_dev

# mkfs cannot create a filesystem with protofiles if realtime is enabled, so
# don't run this test if the rtinherit is anywhere in the mkfs options.
echo "$MKFS_OPTIONS" | grep -q "rtinherit" && \
	_notrun "Cannot mkfs with a protofile and -d rtinherit."

# sanity test - default + one root directory entry
# Note: must do this proto/mkfs now for later inode size calcs
_create_proto 0
echo "=== one entry (shortform)"
_scratch_mkfs_xfs -p $tmp.proto >$tmp.mkfs0 2>&1
_filter_mkfs <$tmp.mkfs0 >/dev/null 2>$tmp.mkfs
. $tmp.mkfs
_check_repair

# block-form root directory & repeat
_create_proto 20
echo "=== twenty entries (block form)"
_scratch_mkfs_xfs -p $tmp.proto | _filter_mkfs >/dev/null 2>&1
_check_repair

# leaf-form root directory & repeat
_create_proto 1000
echo "=== thousand entries (leaf form)"
_scratch_mkfs_xfs -p $tmp.proto | _filter_mkfs >/dev/null 2>&1
_check_repair

# success, all done
status=0
exit
