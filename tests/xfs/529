#! /bin/bash
# SPDX-License-Identifier: GPL-2.0
# Copyright (c) 2021 Chandan Babu R.  All Rights Reserved.
#
# FS QA Test 529
#
# Verify that XFS does not cause inode fork's extent count to overflow when
# adding a single extent while there's no possibility of splitting an existing
# mapping.

. ./common/preamble
_begin_fstest auto quick quota

# Import common functions.
. ./common/filter
. ./common/quota
. ./common/inject
. ./common/populate

# real QA test starts here

_supported_fs xfs
_require_scratch
_require_xfs_quota
_require_xfs_debug
_require_test_program "punch-alternating"
_require_xfs_io_command "falloc"
_require_xfs_io_error_injection "reduce_max_iextents"
_require_xfs_io_error_injection "bmap_alloc_minlen_extent"

echo "Format and mount fs"
_scratch_mkfs_sized $((512 * 1024 * 1024)) >> $seqres.full
_scratch_mount -o uquota >> $seqres.full

bsize=$(_get_file_block_size $SCRATCH_MNT)

echo "* Delalloc to written extent conversion"

testfile=$SCRATCH_MNT/testfile

touch $testfile

echo "Inject reduce_max_iextents error tag"
_scratch_inject_error reduce_max_iextents 1

nr_blks=$((15 * 2))

echo "Create fragmented file"
for i in $(seq 0 2 $((nr_blks - 1))); do
	$XFS_IO_PROG -f -s -c "pwrite $((i * bsize)) $bsize" $testfile \
	       >> $seqres.full 2>&1
	[[ $? != 0 ]] && break
done

echo "Verify \$testfile's extent count"

nextents=$(_xfs_get_fsxattr nextents $testfile)
if (( $nextents > 10 )); then
	echo "Extent count overflow check failed: nextents = $nextents"
	exit 1
fi

echo "Disable reduce_max_iextents error tag"
_scratch_inject_error reduce_max_iextents 0

rm $testfile

echo "* Fallocate unwritten extents"

touch $testfile

echo "Inject reduce_max_iextents error tag"
_scratch_inject_error reduce_max_iextents 1

echo "Fallocate fragmented file"
for i in $(seq 0 2 $((nr_blks - 1))); do
	$XFS_IO_PROG -f -c "falloc $((i * bsize)) $bsize" $testfile \
	       >> $seqres.full 2>&1
	[[ $? != 0 ]] && break
done

echo "Verify \$testfile's extent count"

nextents=$(_xfs_get_fsxattr nextents $testfile)
if (( $nextents > 10 )); then
	echo "Extent count overflow check failed: nextents = $nextents"
	exit 1
fi

echo "Disable reduce_max_iextents error tag"
_scratch_inject_error reduce_max_iextents 0

rm $testfile

echo "* Directio write"

touch $testfile

echo "Inject reduce_max_iextents error tag"
_scratch_inject_error reduce_max_iextents 1

echo "Create fragmented file via directio writes"
for i in $(seq 0 2 $((nr_blks - 1))); do
	$XFS_IO_PROG -d -s -f -c "pwrite $((i * bsize)) $bsize" $testfile \
	       >> $seqres.full 2>&1
	[[ $? != 0 ]] && break
done

echo "Verify \$testfile's extent count"

nextents=$(_xfs_get_fsxattr nextents $testfile)
if (( $nextents > 10 )); then
	echo "Extent count overflow check failed: nextents = $nextents"
	exit 1
fi

echo "Disable reduce_max_iextents error tag"
_scratch_inject_error reduce_max_iextents 0

rm $testfile

# Check if XFS gracefully returns with an error code when we try to increase
# extent count of user quota inode beyond the pseudo max extent count limit.
echo "* Extend quota inodes"

echo "Consume free space"
fillerdir=$SCRATCH_MNT/fillerdir
nr_free_blks=$(stat -f -c '%f' $SCRATCH_MNT)
nr_free_blks=$((nr_free_blks * 90 / 100))

_fill_fs $((bsize * nr_free_blks)) $fillerdir $bsize 0 >> $seqres.full 2>&1

echo "Create fragmented filesystem"
for dentry in $(ls -1 $fillerdir/); do
	$here/src/punch-alternating $fillerdir/$dentry >> $seqres.full
done

echo "Inject reduce_max_iextents error tag"
_scratch_inject_error reduce_max_iextents 1

echo "Inject bmap_alloc_minlen_extent error tag"
_scratch_inject_error bmap_alloc_minlen_extent 1

nr_blks=20

# This is a rough calculation; It doesn't take block headers into
# consideration.
# gdb -batch vmlinux -ex 'print sizeof(struct xfs_dqblk)'
# $1 = 136
nr_quotas_per_block=$((bsize / 136))
nr_quotas=$((nr_quotas_per_block * nr_blks))

echo "Extend uquota file"
for i in $(seq 0 $nr_quotas_per_block $nr_quotas); do
	chown $i $fillerdir >> $seqres.full 2>&1
	[[ $? != 0 ]] && break
done

_scratch_unmount >> $seqres.full

echo "Verify uquota inode's extent count"
uquotino=$(_scratch_xfs_get_metadata_field 'uquotino' 'sb 0')

nextents=$(_scratch_get_iext_count $uquotino data || \
		   _fail "Unable to obtain inode fork's extent count")
if (( $nextents > 10 )); then
	echo "Extent count overflow check failed: nextents = $nextents"
	exit 1
fi

# success, all done
status=0
exit
