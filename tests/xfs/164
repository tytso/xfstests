#! /bin/bash
# SPDX-License-Identifier: GPL-2.0
# Copyright (c) 2007 Silicon Graphics, Inc.  All Rights Reserved.
#
# FS QA Test No. 164
#
# To test for short dio reads on IRIX and Linux - pv#962005/962547
# http://bugworks.engr.sgi.com/query.cgi/962005
#
# In particular we are interested in dio_reads for the cases of:
# * eof on a hole
# * eof on an unwritten extent
# * eof on a sector boundary and not on a sector boundary 
#
. ./common/preamble
_begin_fstest rw pattern auto prealloc quick

_filter_io()
{
    tee -a $seqres.full | sed 's/ops;.*/ops/'
}

#
#   1: [128..199]:      212280..212351    0 (212280..212351)    72 10000
#  
_filter_bmap()
{
    awk '$3 ~ /hole/ { print $1, $2, $3; next }
         $7 ~ /10000/ { print $1, $2, "unwritten"; next }
         {print $1, $2}' >> $seqres.full
}

# Import common functions.
. ./common/filter

# real QA test starts here

# Modify as appropriate.
_supported_fs xfs
_require_test
_require_xfs_io_command "falloc"

testfile=$TEST_DIR/file.$seq

_test_eof_hole()
{
	# on a BB boundary
	rm -f $testfile
	$XFS_IO_PROG -f -d \
		  -c 'pwrite -b 52k 0 52k' \
		  -c 'truncate 100k' \
                  -c 'pread -b 200k 0 200k' \
		  $testfile | _filter_io
	$XFS_IO_PROG -c 'bmap -vp' $testfile | _filter_bmap
	echo ""

	# on an odd byte boundary => 1 short of boundary 
	rm -f $testfile
	boundary_minus1=`expr 100 \* 1024 - 1`
	echo "boundary_minus1 = $boundary_minus1"
	$XFS_IO_PROG -f -d \
		  -c 'pwrite -b 52k 0 52k' \
		  -c "truncate $boundary_minus1" \
                  -c 'pread -b 200k 0 200k' \
		  $testfile | _filter_io
	$XFS_IO_PROG -c 'bmap -vp' $testfile | _filter_bmap
	echo ""

	# on an odd byte boundary => 1 over boundary
	rm -f $testfile
	boundary_plus1=`expr 100 \* 1024 + 1`
	echo "boundary_plus1 = $boundary_plus1"
	$XFS_IO_PROG -f -d \
		  -c 'pwrite -b 52k 0 52k' \
		  -c "truncate $boundary_plus1" \
                  -c 'pread -b 200k 0 200k' \
		  $testfile | _filter_io
	$XFS_IO_PROG -c 'bmap -vp' $testfile | _filter_bmap
	echo ""
}

_test_eof_unwritten_extent()
{
	# on a BB boundary
	rm -f $testfile
	$XFS_IO_PROG -f -d \
		  -c 'resvsp 0 100k' \
		  -c 'truncate 100k' \
		  -c 'pwrite -b 52k 0 52k' \
                  -c 'pread -b 200k 0 200k' \
		  $testfile | _filter_io
	$XFS_IO_PROG -c 'bmap -vp' $testfile | _filter_bmap
	echo ""

	# on an odd byte boundary => 1 short of boundary 
	rm -f $testfile
	boundary_minus1=`expr 100 \* 1024 - 1`
	echo "boundary_minus1 = $boundary_minus1"
	$XFS_IO_PROG -f -d \
		  -c "resvsp 0 $boundary_minus1" \
		  -c "truncate $boundary_minus1" \
		  -c 'pwrite -b 52k 0 52k' \
                  -c 'pread -b 200k 0 200k' \
		$testfile | _filter_io
	$XFS_IO_PROG -c 'bmap -vp' $testfile | _filter_bmap
	echo ""

	# on an odd byte boundary => 1 over boundary
	rm -f $testfile
	boundary_plus1=`expr 100 \* 1024 + 1`
	echo "boundary_plus1 = $boundary_plus1"
	$XFS_IO_PROG -f -d \
		  -c "resvsp 0 $boundary_plus1" \
		  -c "truncate $boundary_plus1" \
		  -c 'pwrite -b 52k 0 52k' \
                  -c 'pread -b 200k 0 200k' \
		  $testfile | _filter_io
	$XFS_IO_PROG -c 'bmap -vp' $testfile | _filter_bmap
	echo ""
}

_test_eof_hole
_test_eof_unwritten_extent

# success, all done
status=0
exit
