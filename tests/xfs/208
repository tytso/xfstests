#! /bin/bash
# SPDX-License-Identifier: GPL-2.0
# Copyright (c) 2016, Oracle and/or its affiliates.  All Rights Reserved.
#
# FS QA Test No. 208
#
# Ensure that the effective cow extent allocation size hint is the maximum of
# the cowextsize and extsize inode fields.
# - Create two reflinked files.  Set extsz hint on second file to $blocksize
#   and cowextsize hint to 1MB.
# - Buffered write to random offsets to scatter CoW reservations.
# - Rewrite the whole file to use up reservations.
# - Check the number of extents.
# - Repeat, but with extsz = 1MB and cowextsz = $blocksize.
#
seq=`basename $0`
seqres=$RESULT_DIR/$seq
echo "QA output created by $seq"

here=`pwd`
tmp=/tmp/$$
status=1    # failure is the default!
trap "_cleanup; exit \$status" 0 1 2 3 15

_cleanup()
{
    cd /
    rm -rf $tmp.*
}

# get standard environment, filters and checks
. ./common/rc
. ./common/filter
. ./common/reflink

# real QA test starts here
_supported_fs xfs
_require_scratch_reflink
_require_cp_reflink
_require_xfs_io_command "fiemap"
_require_xfs_io_command "cowextsize"

rm -f $seqres.full

echo "Format and mount"
_scratch_mkfs > $seqres.full 2>&1
_scratch_mount >> $seqres.full 2>&1

testdir=$SCRATCH_MNT/test-$seq
mkdir $testdir

blksz=65536
nr=128
filesize=$((blksz * nr))
bufnr=16
bufsize=$((blksz * bufnr))

_require_fs_space $SCRATCH_MNT $((filesize / 1024 * 3 * 5 / 4))
real_blksz=$(_get_file_block_size $testdir)
internal_blks=$((filesize / real_blksz))

echo "Create the original files"
$XFS_IO_PROG -f -c "pwrite -S 0x61 -b $bufsize 0 $((filesize + 1))" $testdir/file1 >> $seqres.full

$XFS_IO_PROG -f -c "extsize $real_blksz" $testdir/file2
$XFS_IO_PROG -f -c "cowextsize $bufsize" $testdir/file2
_cp_reflink $testdir/file1 $testdir/file2 >> $seqres.full
_cp_reflink $testdir/file1 $testdir/file2 >> $seqres.full

$XFS_IO_PROG -f -c "extsize $bufsize" $testdir/file3
$XFS_IO_PROG -f -c "cowextsize $real_blksz" $testdir/file3
_cp_reflink $testdir/file1 $testdir/file3 >> $seqres.full
_scratch_cycle_mount

echo "Compare files"
md5sum $testdir/file1 | _filter_scratch
md5sum $testdir/file2 | _filter_scratch
md5sum $testdir/file3 | _filter_scratch

echo "CoW and unmount"
echo "extsize" >> $seqres.full
$XFS_IO_PROG -f -c "extsize" $testdir/file2 >> $seqres.full
echo "cowextsize" >> $seqres.full
$XFS_IO_PROG -f -c "cowextsize" $testdir/file2 >> $seqres.full

$XFS_IO_PROG -f -c "pwrite -R -S 0x63 -b $real_blksz 0 $filesize" -c "fdatasync" $testdir/file2 >> $seqres.full
$XFS_IO_PROG -f -c "pwrite -S 0x63 -b $real_blksz 0 $((filesize + 1))" -c "fdatasync" $testdir/file2 >> $seqres.full

echo "extsize" >> $seqres.full
$XFS_IO_PROG -f -c "extsize" $testdir/file3 >> $seqres.full
echo "cowextsize" >> $seqres.full
$XFS_IO_PROG -f -c "cowextsize" $testdir/file3 >> $seqres.full

$XFS_IO_PROG -f -c "pwrite -R -S 0x63 -b $real_blksz 0 $filesize" -c "fdatasync" $testdir/file3 >> $seqres.full
$XFS_IO_PROG -f -c "pwrite -S 0x63 -b $real_blksz 0 $((filesize + 1))" -c "fdatasync" $testdir/file3 >> $seqres.full
_scratch_cycle_mount

echo "Compare files"
md5sum $testdir/file1 | _filter_scratch
md5sum $testdir/file2 | _filter_scratch
md5sum $testdir/file3 | _filter_scratch

echo "Check extent counts"
old_extents=$(_count_extents $testdir/file1)
new_extents=$(_count_extents $testdir/file2)

echo "old extents: $old_extents" >> $seqres.full
echo "new extents: $new_extents" >> $seqres.full
echo "maximum extents: $internal_blks" >> $seqres.full
test $new_extents -lt $((internal_blks / 20)) || test $new_extents -lt 15 \
	|| echo "file2 badly fragmented"

new_extents=$(_count_extents $testdir/file3)

echo "old extents: $old_extents" >> $seqres.full
echo "new extents: $new_extents" >> $seqres.full
echo "maximum extents: $internal_blks" >> $seqres.full
test $new_extents -lt $((internal_blks / 20)) || test $new_extents -lt 15 \
	|| echo "file3 badly fragmented"

# success, all done
status=0
exit
