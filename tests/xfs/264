#! /bin/bash
# SPDX-License-Identifier: GPL-2.0
# Copyright (c) 2016 Red Hat, Inc.  All Rights Reserved.
#
# FS QA Test 264
#
# Test XFS EIO error handling configuration. Stop XFS from retrying
# to writeback forever when hit EIO.
#
. ./common/preamble
_begin_fstest auto quick mount eio

# Override the default cleanup function.
_cleanup()
{
	cd /
	rm -f $tmp.*
	_dmerror_cleanup
}

# Import common functions.
. ./common/filter
. ./common/dmerror

# real QA test starts here
_supported_fs xfs
_require_scratch
_require_dm_target error
_require_fs_sysfs error/fail_at_unmount
_require_fs_sysfs error/metadata/EIO/max_retries
_require_fs_sysfs error/metadata/EIO/retry_timeout_seconds

_scratch_mkfs >> $seqres.full 2>&1
_dmerror_init

do_test()
{
	local attr="$1"
	local num=0

	_dmerror_mount
	_reset_xfs_sysfs_error_handling $DMERROR_DEV
	# Disable fail_at_unmount before test EIO error handling
	_set_fs_sysfs_attr $DMERROR_DEV error/fail_at_unmount 0
	echo -n "error/fail_at_unmount="
	_get_fs_sysfs_attr $DMERROR_DEV error/fail_at_unmount

	_set_fs_sysfs_attr $DMERROR_DEV $attr 1
	num=`_get_fs_sysfs_attr $DMERROR_DEV $attr`
	echo "$attr=$num"
	# _fail the test if we fail to set $attr to 1, because the test
	# probably will hang in such case and block subsequent tests.
	if [ "$num" != "1" ]; then
		_fail "Failed to set $attr: 1"
	fi

	# start a metadata-intensive workload, but no data allocation operation.
	# Because uncompleted new space allocation I/Os may cause XFS to shutdown
	# after loading error table.
	$FSSTRESS_PROG -z -n 5000 -p 10 \
		       -f creat=10 \
		       -f resvsp=1 \
		       -f truncate=1 \
		       -f punch=1 \
		       -f chown=5 \
		       -f mkdir=5 \
		       -f rmdir=1 \
		       -f mknod=1 \
		       -f unlink=1 \
		       -f symlink=1 \
		       -f rename=1 \
		       -d $SCRATCH_MNT/fsstress >> $seqres.full 2>&1

	# Loading error table without "--nolockfs" option. Because "--nolockfs"
	# won't freeze fs, then some running I/Os may cause XFS to shutdown
	# prematurely. That's not what we want to test.
	_dmerror_load_error_table lockfs
	_dmerror_unmount

	# Mount again to replay log after loading working table, so we have a
	# consistent XFS after test.
	_dmerror_load_working_table
	_dmerror_mount
	_dmerror_unmount
}

#### Test EIO/max_retries ####
# Set EIO/max_retries a limited number(>-1), then even if fail_at_unmount=0,
# the test won't hang.
echo "=== Test EIO/max_retries ==="
do_test error/metadata/EIO/max_retries

#### Test EIO/retry_timeout_seconds ####
# Set EIO/retry_timeout_seconds to a limited number(>0), then even if
# fail_at_unmount=0, the test won't hang.
echo "=== Test EIO/retry_timeout_seconds ==="
do_test error/metadata/EIO/retry_timeout_seconds

# success, all done
status=0
exit
