#! /bin/bash
# SPDX-License-Identifier: GPL-2.0
# Copyright (c) 2009 Eric Sandeen.
#
# FS QA Test No. 206
#
# Test trim of last small AG for large filesystem resizes
#
# As reported at
# http://article.gmane.org/gmane.comp.file-systems.xfs.general/29187
# this trimming may cause an overflow in the new size calculation.
# Patch and testcase at
# http://article.gmane.org/gmane.comp.file-systems.xfs.general/29193
#
. ./common/preamble
_begin_fstest growfs auto quick

# Override the default cleanup function.
_cleanup()
{
    umount $tmpdir
    rmdir $tmpdir
    rm -f $tmp
    rm -f $tmpfile
}

# Import common functions.
. ./common/filter

# real QA test starts here

# Modify as appropriate.
_supported_fs xfs
_require_test
_require_loop

bitsperlong=`$here/src/feature -w`
if [ "$bitsperlong" -ne 64 ]; then
	_notrun "This test is only valid on 64 bit machines"
fi

tmpfile=$TEST_DIR/fsfile.$$
tmpdir=$TEST_DIR/tmpdir.$$

mkdir -p $tmpdir || _fail "!!! failed to create temp mount dir"

# Create a file w/ the offset we wish to resize to
echo "=== truncate file ==="
dd if=/dev/zero of=$tmpfile bs=1 seek=19998630180864 count=1 >/dev/null 2>&1 \
	|| _fail "!!! failed to truncate loopback file to correct size"

# mkfs/growfs output has changed slightly over the years, this distills
# it down to a common set of output parameters we care about
mkfs_filter()
{
	sed -e 's/meta-data=[^ ]*/meta-data=FILE/' \
	    -e 's/ *isize=[0-9]* / isize=N /' \
	    -e "s/\(^log.*blocks=\)\([0-9]*,\)/\1XXXXX,/" \
	    -e "s/internal log/internal    /" \
	    -e "s/, projid32bit=[0-9]//" \
	    -e "s/,\? ftype=[0-9]//" \
	    -e "/.*reflink=/d" \
	    -e "s/\(sectsz\)\(=[0-9]* *\)/\1=512   /" \
	    -e "s/\(sunit=\)\([0-9]* blks,\)/\10 blks,/" \
	    -e "s/, lazy-count=[0-9]//" \
	    -e "/.*crc=/d" \
	    -e "/exchange=/d" \
	    -e "/^Default configuration/d"
}

# mkfs slightly smaller than that, small log for speed.
echo "=== mkfs.xfs ==="
mkfs.xfs -f -bsize=4096 -l size=32m -dagsize=76288719b,size=3905982455b \
	 $tmpfile  | mkfs_filter

mount -o loop $tmpfile $tmpdir || _fail "!!! failed to loopback mount"

# see what happens when we growfs it
echo "=== xfs_growfs ==="
xfs_growfs $tmpdir  | mkfs_filter

# and double-check the new geometry
echo "=== xfs_info ==="
$XFS_INFO_PROG $tmpdir | mkfs_filter

# _cleanup cleans up for us

# success, all done
status=0
exit

