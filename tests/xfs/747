#! /bin/bash
# SPDX-License-Identifier: GPL-2.0-or-later
# Copyright (c) 2022 Oracle.  All Rights Reserved.
#
# FS QA Test No. 747
#
# Check xfs_scrub's media scan can actually return diagnostic information for
# media errors in file data extents.

. ./common/preamble
_begin_fstest auto quick scrub

# Override the default cleanup function.
_cleanup()
{
	cd /
	rm -f $tmp.*
	_dmerror_cleanup
}

# Import common functions.
. ./common/fuzzy
. ./common/filter
. ./common/dmerror

# real QA test starts here
_supported_fs xfs
_require_dm_target error
_require_scratch
_require_scratch_xfs_crc
_require_scrub

filter_scrub_errors() {
	_filter_scratch | sed -e "s/offset $((blksz * 2)) /offset 2FSB /g" \
		-e "s/length $blksz.*/length 1FSB./g"
}

_scratch_mkfs > $tmp.mkfs
_dmerror_init
_dmerror_mount >> $seqres.full 2>&1

_supports_xfs_scrub $SCRATCH_MNT $SCRATCH_DEV || _notrun "Scrub not supported"

# Make sure we don't accidentally allow rtinherit=1
_xfs_force_bdev data $SCRATCH_MNT

victim=$SCRATCH_MNT/a
$XFS_IO_PROG -f -c "pwrite -S 0x58 0 1m" -c "fsync" $victim >> $seqres.full
bmap_str="$($XFS_IO_PROG -c "bmap -elpv" $victim | grep "^[[:space:]]*0:")"
echo "$bmap_str" >> $seqres.full

phys="$(echo "$bmap_str" | $AWK_PROG '{print $3}')"
len="$(echo "$bmap_str" | $AWK_PROG '{print $6}')"
blksz=$(_get_file_block_size $SCRATCH_MNT)
sectors_per_block=$((blksz / 512))

# Did we get at least 4 fs blocks worth of extent?
min_len_sectors=$(( 4 * sectors_per_block ))
test "$len" -lt $min_len_sectors && \
	_fail "could not format a long enough extent on an empty fs??"

phys_start=$(echo "$phys" | sed -e 's/\.\..*//g')

echo ":$phys:$len:$blksz:$phys_start" >> $seqres.full
echo "victim file:" >> $seqres.full
od -tx1 -Ad -c $victim >> $seqres.full

# Reset the dmerror table so that all IO will pass through.
_dmerror_reset_table

cat >> $seqres.full << ENDL
dmerror before:
$DMERROR_TABLE
<end table>
ENDL

# Now mark /only/ the middle of the extent bad.
bad_sector=$(( phys_start + (2 * sectors_per_block) + 1 ))
_dmerror_mark_range_bad $bad_sector 1

cat >> $seqres.full << ENDL
dmerror after marking bad:
$DMERROR_TABLE
<end table>
ENDL

_dmerror_load_error_table

# See if the media scan picks it up.
echo "Scrub for injected media error (single threaded)"

# Once in single-threaded mode
_scratch_scrub -b -x >> $seqres.full 2> $tmp.error
cat $tmp.error | filter_scrub_errors

# Once in parallel mode
echo "Scrub for injected media error (multi threaded)"
_scratch_scrub -x >> $seqres.full 2> $tmp.error
cat $tmp.error | filter_scrub_errors

# Remount to flush the page cache and reread to see the IO error
_dmerror_unmount
_dmerror_mount
echo "victim file:" >> $seqres.full
od -tx1 -Ad -c $victim >> $seqres.full 2> $tmp.error
cat $tmp.error | _filter_scratch

# Scrub again to re-confirm the media error across a remount
echo "Scrub for injected media error (after remount)"
_scratch_scrub -x >> $seqres.full 2> $tmp.error
cat $tmp.error | filter_scrub_errors

# Now mark the bad range good.
_dmerror_mark_range_good $bad_sector 1
_dmerror_load_error_table

cat >> $seqres.full << ENDL
dmerror after marking good:
$DMERROR_TABLE
<end table>
ENDL

echo "Scrub after removing injected media error"

# Scrub one last time to make sure the error's gone.
_scratch_scrub -x >> $seqres.full 2> $tmp.error
cat $tmp.error | filter_scrub_errors

# success, all done
status=0
exit
