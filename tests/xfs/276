#! /bin/bash
# SPDX-License-Identifier: GPL-2.0
# Copyright (c) 2016, Oracle and/or its affiliates.  All Rights Reserved.
#
# FS QA Test No. 276
#
# Check that getfsmap agrees with getbmap when realtime files are present.
#
seq=`basename "$0"`
seqres="$RESULT_DIR/$seq"
echo "QA output created by $seq"

here=`pwd`
tmp=/tmp/$$
status=1    # failure is the default!
trap "_cleanup; exit \$status" 0 1 2 3 15

_cleanup()
{
	cd /
	rm -rf "$tmp".* $TEST_DIR/fsmap $TEST_DIR/bmap
}

# get standard environment, filters and checks
. ./common/rc
. ./common/filter

# real QA test starts here
_supported_fs xfs
_require_realtime
_require_xfs_scratch_rmapbt
_require_xfs_io_command "fsmap"
_require_test_program "punch-alternating"

rm -f "$seqres.full"

echo "Format and mount"
_scratch_mkfs | _filter_mkfs 2> "$tmp.mkfs" >/dev/null
. $tmp.mkfs
cat "$tmp.mkfs" > $seqres.full
_scratch_mount

# Don't let the rt extent size perturb the fsmap output with unwritten
# extents in places we don't expect them
test $rtextsz -eq $dbsize || _notrun "Skipping test due to rtextsize > 1 fsb"

$XFS_IO_PROG -f -R -c 'pwrite -S 0x80 0 737373' $SCRATCH_MNT/urk >> $seqres.full
sync
$here/src/punch-alternating $SCRATCH_MNT/urk >> $seqres.full
ino=$(stat -c '%i' $SCRATCH_MNT/urk)

echo "Get fsmap" | tee -a $seqres.full
$XFS_IO_PROG -c 'fsmap -v' $SCRATCH_MNT >> $seqres.full
$XFS_IO_PROG -c 'fsmap -v' $SCRATCH_MNT | tr '[]()' '    ' > $TEST_DIR/fsmap

echo "Get bmap" | tee -a $seqres.full
$XFS_IO_PROG -c 'bmap -v' $SCRATCH_MNT/urk >> $seqres.full
$XFS_IO_PROG -c 'bmap -v' $SCRATCH_MNT/urk | grep '^[[:space:]]*[0-9]*:' | grep -v 'hole' | tr '[]()' '    ' > $TEST_DIR/bmap

echo "Check bmap and fsmap" | tee -a $seqres.full
cat $TEST_DIR/bmap | while read ext offrange colon blockrange ag agrange total crap; do
	qstr="^[[:space:]]*[0-9]*:[[:space:]]*[0-9]*:[0-9]*[[:space:]]*${blockrange} :[[:space:]]*${ino}[[:space:]]*${offrange}[[:space:]]*${ag}[[:space:]]*${agrange}[[:space:]]*${total}$"
	echo "${qstr}" >> $seqres.full
	grep "${qstr}" $TEST_DIR/fsmap >> $seqres.full
	found=$(grep -c "${qstr}" $TEST_DIR/fsmap)
	test $found -eq 1 || echo "Unexpected output for offset ${offrange}."
done

echo "Check device field of FS metadata and realtime file"
data_dev=$(grep 'static fs metadata' $TEST_DIR/fsmap | head -n 1 | awk '{print $2}')
rt_dev=$(grep "${ino}[[:space:]]*[0-9]*\.\.[0-9]*[[:space:]]*[0-9]*$" $TEST_DIR/fsmap | head -n 1 | awk '{print $2}')
test "${data_dev}" != "${rt_dev}" || echo "data ${data_dev} realtime ${rt_dev}?"

# success, all done
status=0
exit
