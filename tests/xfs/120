#! /bin/bash
# SPDX-License-Identifier: GPL-2.0
# Copyright (c) 2015 Oracle, Inc.  All Rights Reserved.
#
# FS QA Test No. 120
#
# Create and populate an XFS filesystem, corrupt the bmbt, then see how
# the kernel and xfs_repair deal with it.
#
. ./common/preamble
_begin_fstest fuzzers

# Override the default cleanup function.
_cleanup()
{
    cd /
    #rm -f $tmp.*
}

# Import common functions.
. ./common/filter
. ./common/attr
. ./common/populate

# real QA test starts here
_supported_fs xfs

_require_scratch
test -n "${FORCE_FUZZ}" || _require_scratch_xfs_crc
_require_attrs
_require_populate_commands
_require_xfs_db_blocktrash_z_command
test -z "${FUZZ_ARGS}" && FUZZ_ARGS="-n 8 -3"

echo "+ create scratch fs"
_scratch_mkfs_xfs > /dev/null

echo "+ mount fs image"
_scratch_mount
blksz="$(stat -f -c '%s' "${SCRATCH_MNT}")"
nr="$((blksz * 2 / 16))"
_xfs_force_bdev data $SCRATCH_MNT

echo "+ make some files"
$XFS_IO_PROG -f -c "pwrite -S 0x62 0 $((blksz * nr))" -c 'fsync' "${SCRATCH_MNT}/bigfile" >> $seqres.full
for i in $(seq 1 2 ${nr}); do
	$XFS_IO_PROG -f -c "fpunch $((i * blksz)) ${blksz}" "${SCRATCH_MNT}/bigfile" >> $seqres.full
done
inode="$(stat -c '%i' "${SCRATCH_MNT}/bigfile")"
umount "${SCRATCH_MNT}"

echo "+ check fs"
_scratch_xfs_repair -n >> $seqres.full 2>&1 || _fail "xfs_repair should not fail"

echo "+ corrupt image"
_scratch_xfs_db -x -c "inode ${inode}" -c "addr u.bmbt.ptrs[1]" -c "addr u3.bmbt.ptrs[1]" -c "stack" -c "blocktrash -x 32 -y $((blksz * 8)) -z ${FUZZ_ARGS}" >> $seqres.full

echo "+ mount image && modify files"
if _try_scratch_mount >> $seqres.full 2>&1; then

	before="$(stat -c '%b' "${SCRATCH_MNT}/bigfile")"
	$XFS_IO_PROG -f -c "pwrite -S 0x62 ${blksz} ${blksz}" -c 'fsync' "${SCRATCH_MNT}/bigfile" >> $seqres.full 2> /dev/null
	after="$(stat -c '%b' "${SCRATCH_MNT}/bigfile")"
	test "${before}" -eq "${after}" || _fail "pwrite should fail on corrupt bmbt"
	umount "${SCRATCH_MNT}"
fi

echo "+ repair fs"
_repair_scratch_fs >> $seqres.full 2>&1

echo "+ mount image (2)"
_scratch_mount

echo "+ chattr -R -i"
$CHATTR_PROG -R -f -i "${SCRATCH_MNT}/"

echo "+ modify files (2)"
touch "${SCRATCH_MNT}/bigfile"
before="$(stat -c '%b' "${SCRATCH_MNT}/bigfile")"
$XFS_IO_PROG -f -c "pwrite -S 0x62 ${blksz} ${blksz}" -c 'fsync' "${SCRATCH_MNT}/bigfile" >> $seqres.full 2> /dev/null
after="$(stat -c '%b' "${SCRATCH_MNT}/bigfile")"
test "${before}" -ne "${after}" || _fail "pwrite failed after fixing corrupt bmbt"
umount "${SCRATCH_MNT}"

echo "+ check fs (2)"
_scratch_xfs_repair -n >> $seqres.full 2>&1 || _fail "xfs_repair should not fail"

status=0
exit
