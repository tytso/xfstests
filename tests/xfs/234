#! /bin/bash
# SPDX-License-Identifier: GPL-2.0
# Copyright (c) 2016, Oracle and/or its affiliates.  All Rights Reserved.
#
# FS QA Test No. 234
#
# Ensure that we can create enough distinct rmap entries to force creation
# of a multi-level rmap btree, and that metadump will successfully copy
# said block.
#
. ./common/preamble
_begin_fstest auto quick rmap punch metadump

# Override the default cleanup function.
_cleanup()
{
    cd /
    _scratch_unmount > /dev/null 2>&1
    rm -rf $tmp.* $metadump_file $TEST_DIR/image
}

# Import common functions.
. ./common/filter

# real QA test starts here
_supported_fs xfs
_require_command "$XFS_MDRESTORE_PROG" "xfs_mdrestore"
_require_loop
_require_xfs_scratch_rmapbt
_require_xfs_io_command "fpunch"

_scratch_mkfs >/dev/null 2>&1
_scratch_mount

testdir=$SCRATCH_MNT/test-$seq
mkdir $testdir
metadump_file=$TEST_DIR/${seq}_metadump

echo "Create the original file blocks"
blksz="$(_get_block_size $testdir)"
nr_blks=$((4 * blksz / 12))
_pwrite_byte 0x61 0 $((blksz * nr_blks)) $testdir/file1 >> $seqres.full
sync

echo "Punch every other block"
seq 1 2 $((nr_blks - 1)) | while read nr; do
	$XFS_IO_PROG -c "fpunch $((nr * blksz)) $blksz" $testdir/file1 >> $seqres.full
done

echo "Create metadump file"
_scratch_unmount
_scratch_xfs_metadump $metadump_file

# Now restore the obfuscated one back and take a look around
echo "Restore metadump"
SCRATCH_DEV=$TEST_DIR/image _scratch_xfs_mdrestore $metadump_file
SCRATCH_DEV=$TEST_DIR/image _scratch_mount
SCRATCH_DEV=$TEST_DIR/image _scratch_unmount

echo "Check restored fs"
_check_generic_filesystem $metadump_file

# success, all done
status=0
exit
