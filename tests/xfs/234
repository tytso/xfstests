#! /bin/bash
# SPDX-License-Identifier: GPL-2.0
# Copyright (c) 2016, Oracle and/or its affiliates.  All Rights Reserved.
#
# FS QA Test No. 234
#
# Ensure that we can create enough distinct rmap entries to force creation
# of a multi-level rmap btree, and that metadump will successfully copy
# said block.
#
. ./common/preamble
_begin_fstest auto quick rmap punch metadump

# Override the default cleanup function.
_cleanup()
{
    cd /
    _scratch_unmount > /dev/null 2>&1
    [[ -n $logdev && $logdev != "none" && $logdev != $SCRATCH_LOGDEV ]] && \
	    _destroy_loop_device $logdev
    [[ -n $datadev ]] && _destroy_loop_device $datadev
    rm -rf $tmp.* $testdir $metadump_file $TEST_DIR/image \
       $TEST_DIR/log-image
}

# Import common functions.
. ./common/filter

# real QA test starts here
_supported_fs xfs
_require_command "$XFS_MDRESTORE_PROG" "xfs_mdrestore"
_require_loop
_require_xfs_scratch_rmapbt
_require_xfs_io_command "fpunch"

metadump_file=$TEST_DIR/${seq}_metadump

verify_metadump_v1()
{
	local max_version=$1
	local version=""

	if [[ $max_version == 2 ]]; then
		version="-v 1"
	fi

	_scratch_xfs_metadump $metadump_file $version

	SCRATCH_DEV=$TEST_DIR/data-image SCRATCH_LOGDEV="" \
		   _scratch_xfs_mdrestore $metadump_file

	datadev=$(_create_loop_device $TEST_DIR/data-image)

	SCRATCH_DEV=$datadev _scratch_mount
	SCRATCH_DEV=$datadev _scratch_unmount

	logdev=$SCRATCH_LOGDEV
	[[ -z $logdev ]] && logdev=none
	_check_xfs_filesystem $datadev $logdev none

	_destroy_loop_device $datadev
	datadev=""
	rm -f $TEST_DIR/data-image
}

verify_metadump_v2()
{
	version="-v 2"

	_scratch_xfs_metadump $metadump_file $version

	# Metadump v2 files can contain contents dumped from an external log
	# device. Use a temporary file to hold the log device contents restored
	# from such a metadump file.
	slogdev=""
	if [[ -n $SCRATCH_LOGDEV ]]; then
		slogdev=$TEST_DIR/log-image
	fi

	SCRATCH_DEV=$TEST_DIR/data-image SCRATCH_LOGDEV=$slogdev \
		   _scratch_xfs_mdrestore $metadump_file

	datadev=$(_create_loop_device $TEST_DIR/data-image)

	logdev=${SCRATCH_LOGDEV}
	if [[ -s $TEST_DIR/log-image ]]; then
		logdev=$(_create_loop_device $TEST_DIR/log-image)
	fi

	SCRATCH_DEV=$datadev SCRATCH_LOGDEV=$logdev _scratch_mount
	SCRATCH_DEV=$datadev SCRATCH_LOGDEV=$logdev _scratch_unmount

	[[ -z $logdev ]] && logdev=none
	_check_xfs_filesystem $datadev $logdev none

	if [[ -s $TEST_DIR/log-image ]]; then
		_destroy_loop_device $logdev
		logdev=""
		rm -f $TEST_DIR/log-image
	fi

	_destroy_loop_device $datadev
	datadev=""
	rm -f $TEST_DIR/data-image
}

_scratch_mkfs >/dev/null 2>&1

max_md_version=$(_xfs_metadump_max_version)

_scratch_mount

testdir=$SCRATCH_MNT/test-$seq
mkdir $testdir

echo "Create the original file blocks"
blksz="$(_get_block_size $testdir)"
nr_blks=$((4 * blksz / 12))
_pwrite_byte 0x61 0 $((blksz * nr_blks)) $testdir/file1 >> $seqres.full
sync

echo "Punch every other block"
seq 1 2 $((nr_blks - 1)) | while read nr; do
	$XFS_IO_PROG -c "fpunch $((nr * blksz)) $blksz" $testdir/file1 >> $seqres.full
done

_scratch_unmount

echo "Create metadump file, restore it and check restored fs"

verify_metadump_v1 $max_md_version

if [[ $max_md_version == 2 ]]; then
	verify_metadump_v2
fi

# success, all done
status=0
exit
