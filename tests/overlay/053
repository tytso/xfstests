#! /bin/bash
# SPDX-License-Identifier: GPL-2.0
# Copyright (C) 2018 CTERA Networks. All Rights Reserved.
#
# FS QA Test No. 053
#
# Test encode/decode of non-samefs overlay file handles with renames
#
# This is a variant of overlay file handles with renames test for an
# overlayfs that is composed of multiple lower layers not on the same
# underlying fs.
#
# - Check decode/read of file handles after rename of parent
# - Check decode/read of file handles after rename of grandparent
# - Check decode/read of file handles after move to new parent
# - Check encode/decode/read of file handles in non-upper overlay
#
# This test requires and enables overlayfs NFS export support and merge
# dir rename support (redirect_dir).
# NFS export support depends on and requires overlayfs index feature.
#
. ./common/preamble
_begin_fstest auto quick copyup redirect exportfs nonsamefs

# Override the default cleanup function.
_cleanup()
{
	cd /
	rm -f $tmp.*
	# Cleanup overlay scratch mount that is holding base test mount
	# to prevent _check_test_fs and _test_umount from failing before
	# _check_scratch_fs _scratch_umount
	$UMOUNT_PROG $SCRATCH_MNT 2>/dev/null
}

# Import common functions.
. ./common/filter

# real QA test starts here

_supported_fs overlay
_require_test
_require_test_program "open_by_handle"
# Use non-default scratch underlying overlay dirs, we need to check
# them explicity after test.
_require_scratch_nocheck
# We need to require all features together, because nfs_export cannot
# be enabled when index is disabled
_require_scratch_overlay_features index nfs_export redirect_dir

# Lower is on test partition
lower=$OVL_BASE_TEST_DIR/$OVL_LOWER-$seq
# Upper/work are on scratch partition
middle=$OVL_BASE_SCRATCH_MNT/$OVL_LOWER
upper=$OVL_BASE_SCRATCH_MNT/$OVL_UPPER
work=$OVL_BASE_SCRATCH_MNT/$OVL_WORK

NUMFILES=1

# Create test dir and empty test files
create_test_files()
{
	local dir=$1
	local opt=$2

	mkdir -p $dir
	$here/src/open_by_handle -cp $opt $dir $NUMFILES
}

# Test encode/decode file handles on overlay mount
test_file_handles()
{
	local dir=$1
	shift

	echo test_file_handles $dir $* | _filter_scratch | \
				sed -e "s,$tmp\.,,g"
	$here/src/open_by_handle $* $dir $NUMFILES
}

# Re-create lower/middle/upper/work dirs
create_dirs()
{
	# Create lower dir on test partition
	rm -rf $lower
	mkdir $lower

	# Create middle/upper/work dirs on scratch partition
	_scratch_mkfs
}

# Mount an overlay on $SCRATCH_MNT with lower layer on test partition
# and middle and upper layer on scratch partition
mount_dirs()
{
	_overlay_scratch_mount_dirs $middle:$lower $upper $work \
				-o "index=on,nfs_export=on,redirect_dir=on"
}

# Unmount the overlay without unmounting base fs and check the
# underlying dirs
unmount_dirs()
{
	$UMOUNT_PROG $SCRATCH_MNT

	_overlay_check_scratch_dirs $middle:$lower $upper $work \
				-o "index=on,nfs_export=on,redirect_dir=on"
}

# Check non-stale file handles of lower/upper moved files
create_dirs
create_test_files $upper/uppertestdir -w
create_test_files $lower/lowertestdir -w
mkdir -p $lower/lowertestdir.lo $lower/lowertestdir.up $upper/uppertestdir.lo $upper/uppertestdir.up
mount_dirs
# Check encode/decode/read of lower/upper file handles after move to new upper testdir
test_file_handles $SCRATCH_MNT/uppertestdir -o $tmp.upper_file_handles
test_file_handles $SCRATCH_MNT/lowertestdir -o $tmp.lower_file_handles
mv $SCRATCH_MNT/uppertestdir/* $SCRATCH_MNT/uppertestdir.up/
mv $SCRATCH_MNT/lowertestdir/* $SCRATCH_MNT/uppertestdir.lo/
# Check open and read from stored file handles
test_file_handles $SCRATCH_MNT -r -i $tmp.upper_file_handles
test_file_handles $SCRATCH_MNT -r -i $tmp.lower_file_handles
# Check encode/decode/read of lower/upper file handles after move to new merge testdir
test_file_handles $SCRATCH_MNT/uppertestdir.up -o $tmp.upper_file_handles
test_file_handles $SCRATCH_MNT/uppertestdir.lo -o $tmp.lower_file_handles
mv $SCRATCH_MNT/uppertestdir.up/* $SCRATCH_MNT/lowertestdir.up/
mv $SCRATCH_MNT/uppertestdir.lo/* $SCRATCH_MNT/lowertestdir.lo/
# Check open and read from stored file handles
test_file_handles $SCRATCH_MNT -r -i $tmp.upper_file_handles
test_file_handles $SCRATCH_MNT -r -i $tmp.lower_file_handles
unmount_dirs

# Check non-stale file handles of lower/upper renamed dirs
create_dirs
create_test_files $upper/uppertestdir -w
create_test_files $lower/lowertestdir -w
create_test_files $upper/uppertestdir/subdir -w
create_test_files $lower/lowertestdir/subdir -w
mount_dirs
# Check encode/decode/read of lower/upper file handles after rename of testdir
test_file_handles $SCRATCH_MNT/uppertestdir -p -o $tmp.upper_file_handles
test_file_handles $SCRATCH_MNT/lowertestdir -p -o $tmp.lower_file_handles
# Check encode/decode/read of lower/upper file handles after rename of testdir's parent
test_file_handles $SCRATCH_MNT/uppertestdir/subdir -p -o $tmp.upper_subdir_file_handles
test_file_handles $SCRATCH_MNT/lowertestdir/subdir -p -o $tmp.lower_subdir_file_handles
# Rename pure upper dir
mv $SCRATCH_MNT/uppertestdir $SCRATCH_MNT/uppertestdir.new/
# Copy up lower dir, index and rename
mv $SCRATCH_MNT/lowertestdir $SCRATCH_MNT/lowertestdir.new/
# Check open, read and readdir from stored file handles
# (testdir argument is the mount point and NOT the dir
#  we are trying to open by stored file handle)
test_file_handles $SCRATCH_MNT -rp -i $tmp.upper_file_handles
test_file_handles $SCRATCH_MNT -rp -i $tmp.lower_file_handles
test_file_handles $SCRATCH_MNT -rp -i $tmp.upper_subdir_file_handles
test_file_handles $SCRATCH_MNT -rp -i $tmp.lower_subdir_file_handles
# Retry decoding lower subdir file handle when indexed testdir is in dcache
# (providing renamed testdir argument pins the indexed testdir to dcache)
test_file_handles $SCRATCH_MNT/lowertestdir.new -rp -i $tmp.lower_subdir_file_handles
unmount_dirs

# Check encode/decode/read of lower file handles on lower layers only r/o overlay.
# For non-upper overlay mount, nfs_export requires disabling redirect_dir.
$MOUNT_PROG -t overlay $OVL_BASE_SCRATCH_MNT $SCRATCH_MNT \
			-o ro,redirect_dir=nofollow,nfs_export=on,lowerdir=$middle:$lower
test_file_handles $SCRATCH_MNT/lowertestdir -rp
test_file_handles $SCRATCH_MNT/lowertestdir/subdir -rp
unmount_dirs

# Check encode/decode/read of lower file handles on lower layers only r/o overlay
# with non-indexed redirects from top lower layer to bottom lower layer.
# Overlay lookup cannot follow the redirect from $upper/lowertestdir.new to
# $lower/lowertestdir. Instead, we mount an overlay subtree rooted at these
# directories.
$MOUNT_PROG -t overlay $OVL_BASE_SCRATCH_MNT $SCRATCH_MNT \
		-o ro,redirect_dir=nofollow,nfs_export=on,lowerdir=$upper/lowertestdir.new:$lower/lowertestdir
test_file_handles $SCRATCH_MNT -r
test_file_handles $SCRATCH_MNT/subdir -rp
unmount_dirs

status=0
exit
