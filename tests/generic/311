#! /bin/bash
# SPDX-License-Identifier: GPL-2.0
# Copyright (c) 2013 Fusion IO. All Rights Reserved.
#
# FS QA Test No. 311
#
# Run various fsync tests with dm flakey in freeze() mode and non freeze()
# mode. The idea is that we do random writes and randomly fsync and verify that
# after a fsync() followed by a freeze()+failure or just failure that the file
# is correct.  We remount the file system after the failure so that the file
# system can do whatever cleanup it needs to and md5sum the file to make sure
# it matches hat it was before the failure.  We also fsck to make sure the file
# system is consistent.
#
# The fsync tester just random writes into prealloc or not, and then fsync()s
# randomly or sync()'s randomly and then fsync()'s before exit.  There are a few
# tests that were handcrafted to reproduce bugs in btrfs, so it's also a
# regression test of sorts.
#
. ./common/preamble
_begin_fstest auto metadata log

# Override the default cleanup function.
_cleanup()
{
	_cleanup_flakey
}

# Import common functions.
. ./common/filter
. ./common/dmflakey

# real QA test starts here
_supported_fs generic
_require_scratch_nocheck
_require_odirect
_require_dm_target flakey

# xfs_io is not required for this test, but it's the best way to verify
# the test system supports fallocate() for allocation
_require_xfs_io_command "falloc"

_require_test_program "fsync-tester"

SEED=1
testfile=$SCRATCH_MNT/$seq.fsync

_run_test()
{
	# _run_test <testnum> <0 - buffered | 1 - O_DIRECT>
	test_num=$1

	direct_opt=""
	[ $2 -eq 1 ] && direct_opt="-d"

	$here/src/fsync-tester -s $SEED -t $test_num $direct_opt $testfile
	[ $? -ne 0 ] && _fatal "fsync tester exited abnormally"

	_md5_checksum $testfile
	_load_flakey_table $FLAKEY_DROP_WRITES $lockfs
	_unmount_flakey

	#Ok mount so that any recovery that needs to happen is done
	_load_flakey_table $FLAKEY_ALLOW_WRITES
	_mount_flakey
	_md5_checksum $testfile

	#Unmount and fsck to make sure we got a valid fs after replay
	_unmount_flakey
	_check_scratch_fs $FLAKEY_DEV
	[ $? -ne 0 ] && _fatal "fsck failed"

	_mount_flakey
}

_scratch_mkfs >> $seqres.full 2>&1
_require_metadata_journaling $SCRATCH_DEV

# Create a basic flakey device that will never error out
_init_flakey
_mount_flakey

buffered=0
direct=1

for i in $(seq 1 20); do
	lockfs=1
	SEED=$i
	echo "Running test $i buffered, normal suspend"
	_run_test $i $buffered
	echo "Running test $i direct, normal suspend"
	_run_test $i $direct

	lockfs=0
	echo "Running test $i buffered, nolockfs"
	_run_test $i $buffered
	echo "Running test $i direct, nolockfs"
	_run_test $i $direct
done

status=0
exit
