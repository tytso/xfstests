#! /bin/bash
# SPDX-License-Identifier: GPL-2.0
# Copyright (c) 2015, Oracle and/or its affiliates.  All Rights Reserved.
#
# FS QA Test No. 158
#
# Check that various invalid dedupe scenarios are rejected.
#
. ./common/preamble
_begin_fstest auto quick clone dedupe

# Override the default cleanup function.
_cleanup()
{
    cd /
    rm -rf $tmp.* $testdir1
}

# Import common functions.
. ./common/filter
. ./common/attr
. ./common/reflink

# real QA test starts here
_require_test_dedupe
_require_scratch_dedupe
_require_mknod

echo "Format and mount"
_scratch_mkfs > $seqres.full 2>&1
_scratch_mount >> $seqres.full 2>&1

testdir1="$TEST_DIR/test-$seq"
rm -rf $testdir1
mkdir $testdir1

testdir2=$SCRATCH_MNT/test-$seq
mkdir $testdir2

echo "Create the original files"
blksz="$(_get_file_block_size $testdir1)"
blks=1000
margin='7%'
sz=$((blksz * blks))
free_blocks0=$(stat -f $testdir1 -c '%f')
nr=4
filesize=$((blksz * nr))
_pwrite_byte 0x61 0 $sz $testdir1/file1 >> $seqres.full
_pwrite_byte 0x61 0 $sz $testdir1/file2 >> $seqres.full
_pwrite_byte 0x61 0 $sz $testdir1/file3 >> $seqres.full
_pwrite_byte 0x61 0 $sz $testdir2/file1 >> $seqres.full
_pwrite_byte 0x61 0 $sz $testdir2/file2 >> $seqres.full
mkdir $testdir1/dir1
seq 1 $((2 * blksz / 250)) | while read f; do
	touch $testdir1/dir1/$f
done
mknod $testdir1/dev1 c 1 3
mkfifo $testdir1/fifo1
sync

_filter_enotty() {
	_filter_dedupe_error | \
	sed -e 's/Inappropriate ioctl for device/Invalid argument/g'
}

_filter_eperm() {
	_filter_dedupe_error | \
	sed -e 's/Permission denied/Invalid argument/g'
}

echo "Try cross-device dedupe"
_dedupe_range $testdir1/file1 0 $testdir2/file1 0 $blksz \
	2>&1 | _filter_dedupe_error

echo "Try unaligned dedupe"
_dedupe_range $testdir1/file1 37 $testdir1/file1 59 23 \
	2>&1 | _filter_dedupe_error

echo "Try overlapping dedupe"
_dedupe_range $testdir1/file1 0 $testdir1/file1 1 $((blksz * 2)) \
	2>&1 | _filter_dedupe_error

echo "Try dedupe from past EOF"
_dedupe_range $testdir1/file1 $(( (blks + 10) * blksz)) $testdir1/file1 0 $blksz \
	2>&1 | _filter_dedupe_error

echo "Try dedupe to past EOF, destination offset beyond EOF"
_dedupe_range $testdir1/file1 0 $testdir1/file1 $(( (blks + 10) * blksz)) $blksz \
	2>&1 | _filter_dedupe_error

echo "Try dedupe to past EOF, destination offset behind EOF"
_dedupe_range $testdir1/file1 0 $testdir1/file1 $(( (blks - 1) * blksz)) $((blksz * 2)) \
	2>&1 | _filter_dedupe_error

echo "Try to dedupe a dir"
_dedupe_range $testdir1/dir1 0 $testdir1/file2 0 $blksz 2>&1 | _filter_dedupe_error

echo "Try to dedupe a device"
_dedupe_range $testdir1/dev1 0 $testdir1/file2 0 $blksz 2>&1 | _filter_enotty

echo "Try to dedupe to a dir"
_dedupe_range $testdir1/file1 0 $testdir1/dir1 0 $blksz \
	2>&1 | _filter_test_dir | _filter_dedupe_error

echo "Try to dedupe to a device"
_dedupe_range $testdir1/file1 0 $testdir1/dev1 0 $blksz 2>&1 | _filter_eperm

echo "Try to dedupe to a fifo"
_dedupe_range $testdir1/file1 0 $testdir1/fifo1 0 $blksz -n 2>&1 | _filter_eperm

echo "Try to dedupe an append-only file"
_dedupe_range $testdir1/file1 0 $testdir1/file3 0 $blksz -a \
	2>&1 >> $seqres.full | _filter_dedupe_error

echo "Dedupe two files"
_dedupe_range $testdir1/file1 0 $testdir1/file2 0 $blksz >> $seqres.full
_dedupe_range $testdir2/file1 0 $testdir2/file2 0 $blksz >> $seqres.full

# success, all done
status=0
exit
