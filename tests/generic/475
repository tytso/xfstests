#! /bin/bash
# SPDX-License-Identifier: GPL-2.0
# Copyright (c) 2017 Oracle, Inc.  All Rights Reserved.
#
# FS QA Test No. 475
#
# Test log recovery with repeated (simulated) disk failures.  We kick
# off fsstress on the scratch fs, then switch out the underlying device
# with dm-error to see what happens when the disk goes down.  Having
# taken down the fs in this manner, remount it and repeat.  This test
# is a Good Enough (tm) simulation of our internal multipath failure
# testing efforts.
#
. ./common/preamble
_begin_fstest shutdown auto log metadata eio recoveryloop

# Override the default cleanup function.
_cleanup()
{
	cd /
	rm -f $tmp.*
	$KILLALL_PROG -9 fsstress > /dev/null 2>&1
	_dmerror_unmount
	_dmerror_cleanup
}

# Import common functions.
. ./common/dmerror

# Modify as appropriate.
_supported_fs generic

_require_scratch
_require_dm_target error
_require_command "$KILLALL_PROG" "killall"

echo "Silence is golden."

_scratch_mkfs >> $seqres.full 2>&1
_require_metadata_journaling $SCRATCH_DEV
_dmerror_init
_dmerror_mount

while _soak_loop_running $((50 * TIME_FACTOR)); do
	($FSSTRESS_PROG $FSSTRESS_AVOID -d $SCRATCH_MNT -n 999999 -p $((LOAD_FACTOR * 4)) >> $seqres.full &) \
		> /dev/null 2>&1

	# purposely include 0 second sleeps to test shutdown immediately after
	# recovery
	sleep $((RANDOM % 3))

	# This test aims to simulate sudden disk failure, which means that we
	# do not want to quiesce the filesystem or otherwise give it a chance
	# to flush its logs.  Therefore we want to call dmsetup with the
	# --nolockfs parameter; to make this happen we must call the load
	# error table helper *without* 'lockfs'.
	_dmerror_load_error_table

	ps -e | grep fsstress > /dev/null 2>&1
	while [ $? -eq 0 ]; do
		$KILLALL_PROG -9 fsstress > /dev/null 2>&1
		wait > /dev/null 2>&1
		ps -e | grep fsstress > /dev/null 2>&1
	done

	# Mount again to replay log after loading working table, so we have a
	# consistent XFS after test.
	_dmerror_unmount || _fail "unmount failed"
	_dmerror_load_working_table
	_dmerror_mount || _fail "mount failed"
done

# success, all done
status=0
exit
