#! /bin/bash
# SPDX-License-Identifier: GPL-2.0
# Copyright (c) 2018 Oracle, Inc.  All Rights Reserved.
#
# FS QA Test No. 513
#
# Ensure that ctime is updated and capabilities are cleared when reflinking.
#
. ./common/test_names
_set_seq_and_groups auto quick clone
trap "_cleanup; exit \$status" 0 1 2 3 15

_cleanup()
{
	cd /
	rm -f $tmp.*
}

# get standard environment, filters and checks
. ./common/rc
. ./common/filter
. ./common/reflink

# real QA test starts here
_supported_fs generic
_require_scratch_reflink
_require_command "$GETCAP_PROG" getcap
_require_command "$SETCAP_PROG" setcap

rm -f $seqres.full

_scratch_mkfs >>$seqres.full 2>&1
_scratch_mount

$XFS_IO_PROG -f -c "pwrite -S 0x18 0 1m" $SCRATCH_MNT/foo >>$seqres.full
$XFS_IO_PROG -f -c "pwrite -S 0x20 0 1m" $SCRATCH_MNT/bar >>$seqres.full

$SETCAP_PROG cap_setgid,cap_setuid+ep $SCRATCH_MNT/bar

before_cap="$(_getcap -v $SCRATCH_MNT/bar)"
before_ctime="$(stat -c '%z' $SCRATCH_MNT/bar)"

sleep 1

$XFS_IO_PROG -c "reflink $SCRATCH_MNT/foo" $SCRATCH_MNT/bar >> $seqres.full 2>&1

after_cap="$(_getcap -v $SCRATCH_MNT/bar)"
after_ctime="$(stat -c '%z' $SCRATCH_MNT/bar)"

echo "$before_cap $before_ctime" >> $seqres.full
echo "$after_cap $after_ctime" >> $seqres.full

test "$before_cap" != "$after_cap" || echo "Expected capabilities to drop."
test "$before_ctime" != "$after_ctime" || echo "Expected ctime to change."

echo Silence is golden.
status=0
exit
