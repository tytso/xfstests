#! /bin/bash
# SPDX-License-Identifier: GPL-2.0
# Copyright (c) 2015, Oracle and/or its affiliates.  All Rights Reserved.
#
# FS QA Test No. 137
#
# Ensure that we can reflink and dedupe blocks within the same file...
#   - Create a file with three distinct blocks ABB
#   - Reflink block zero to the multiple-of-three blocks
#   - Reflink block one to the multiple-of-five blocks
#   - Dedupe block two to the multiple-of-seven blocks
#   - Check that we successfully avoid deduping with holes, unwritten
#     extents, and non-matches; but actually dedupe real matches.
#
. ./common/preamble
_begin_fstest auto clone dedupe

# Override the default cleanup function.
_cleanup()
{
    cd /
    rm -rf $tmp.* $testdir
}

# Import common functions.
. ./common/filter
. ./common/reflink

# real QA test starts here
_require_test_reflink
_require_test_dedupe
_require_xfs_io_command "falloc"

testdir=$TEST_DIR/test-$seq
rm -rf $testdir
mkdir $testdir

echo "Create the original file blocks"
blksz=65536
_require_congruent_file_oplen $TEST_DIR $blksz
_pwrite_byte 0x61 0 $blksz $testdir/file1 >> $seqres.full
_pwrite_byte 0x62 $blksz $((blksz * 2)) $testdir/file1 >> $seqres.full

nr_blks=1024

echo "fallocate half the file"
$XFS_IO_PROG -f -c "falloc $((nr_blks * blksz / 2)) $((nr_blks * blksz / 2))" $testdir/file1 >> $seqres.full

echo "Reflink block zero to the threes"
seq 1 $((nr_blks / 3)) | while read nr; do
	_reflink_range $testdir/file1 0 $testdir/file1 $((nr * 3 * blksz)) \
			$blksz >> $seqres.full
done

echo "Reflink block one to the fives"
seq 1 $((nr_blks / 5)) | while read nr; do
	_reflink_range $testdir/file1 $blksz $testdir/file1 \
			$((nr * 5 * blksz)) $blksz >> $seqres.full
done

echo "Dedupe block two to the sevens"
seq 1 $((nr_blks / 7)) | while read nr; do
	_dedupe_range $testdir/file1 $((blksz * 2)) $testdir/file1 \
			$((nr * 7 * blksz)) $blksz >> $seqres.full 2>&1
done

_test_cycle_mount

echo "Check block mappings"
md5sum $testdir/file1 | _filter_test_dir

crcZ=$(_md5_range_checksum /dev/zero 0 $blksz)
crc0=$(_md5_range_checksum $testdir/file1 0 $blksz)
crc1=$(_md5_range_checksum $testdir/file1 $blksz $blksz)
crc2=$(_md5_range_checksum $testdir/file1 $((blksz * 2)) $blksz)

check_block() {
	lblk=$1
	rem7=$((lblk % 7))
	rem5=$((lblk % 5))
	rem3=$((lblk % 3))

	crc=$(_md5_range_checksum $testdir/file1 $((lblk * blksz)) $blksz)

	if [ $rem7 -eq 0 ]; then
		if [ $rem5 -eq 0 ]; then
			test $crc2 = $crc || echo "lblk $lblk doesn't match block 2"
		elif [ $rem3 -eq 0 ]; then
			test $crc0 = $crc || echo "lblk $lblk doesn't match block 0"
		elif [ $lblk -lt $((nr_blks / 2)) ]; then
			test $crcZ = $crc || echo "lblk $lblk isn't zeroed"
		fi
	elif [ $rem5 -eq 0 ]; then
		test $crc1 = $crc || echo "lblk $lblk doesn't match block 1"
	elif [ $rem3 -eq 0 ]; then
		test $crc0 = $crc || echo "lblk $lblk doesn't match block 0"
	elif [ $lblk -lt $((nr_blks / 2)) ]; then
		test $crcZ = $crc || echo "lblk $lblk isn't zeroed"
	fi
}

seq 3 $((nr_blks - 1)) | while read lblk; do
	err="$(check_block $lblk)"
	test -n "$err" && echo "$lblk: $err"
done

# success, all done
status=0
exit
