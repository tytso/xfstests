#! /bin/bash
# SPDX-License-Identifier: GPL-2.0
# Copyright (c) 2014 Red Hat, Inc.  All Rights Reserved.
#
# FS QA Test No. 033
#
# This test stresses indirect block reservation for delayed allocation extents.
# XFS reserves extra blocks for deferred allocation of delalloc extents. These
# reserved blocks can be divided among more extents than anticipated if the
# original extent for which the blocks were reserved is split into multiple
# delalloc extents. If this scenario repeats, eventually some extents are left
# without any indirect block reservation whatsoever. This leads to assert
# failures and possibly other problems in XFS.
#
. ./common/preamble
_begin_fstest auto quick rw zero

# Import common functions.

# real QA test starts here

# Modify as appropriate.
_supported_fs generic
_require_scratch
_require_xfs_io_command "fzero"

_scratch_mkfs >/dev/null 2>&1
_scratch_mount

file=$SCRATCH_MNT/file.$seq
bytes=$((64 * 1024))

# create sequential delayed allocation
$XFS_IO_PROG -f -c "pwrite 0 $bytes" $file >> $seqres.full 2>&1

# Zero every other 4k range to split the larger delalloc extent into many more
# smaller extents. Use zero instead of hole punch because the former does not
# force writeback (and hence delalloc conversion). It can simply discard
# delalloc blocks and convert the ranges to unwritten.
endoff=$((bytes - 4096))
for i in $(seq 0 8192 $endoff); do
	$XFS_IO_PROG -c "fzero -k $i 4k" $file >> $seqres.full 2>&1
done

# now zero the opposite set to remove remaining delalloc extents
for i in $(seq 4096 8192 $endoff); do
	$XFS_IO_PROG -c "fzero -k $i 4k" $file >> $seqres.full 2>&1
done

_scratch_cycle_mount
hexdump $file

status=0
exit
