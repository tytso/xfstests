#! /bin/bash
# SPDX-License-Identifier: GPL-2.0
# Copyright (c) 2017-2019 Red Hat, Inc.  All Rights Reserved.
#
# FS QA Test No. 524
#
# Test XFS page writeback code for races with the cached file mapping. XFS
# caches the file -> block mapping for a full extent once it is initially looked
# up. The cached mapping is used for all subsequent pages in the same writeback
# cycle that cover the associated extent. Under certain conditions, it is
# possible for concurrent operations on the file to invalidate the cached
# mapping without the knowledge of writeback. Writeback ends up sending I/O to a
# partly stale mapping and potentially leaving delalloc blocks in the current
# mapping unconverted.

. ./common/preamble
_begin_fstest auto quick

# Import common functions.

# real QA test starts here

# Modify as appropriate.
_supported_fs generic
_require_scratch
_require_test_program "feature"
_require_xfs_io_command "sync_range"

_scratch_mkfs >> $seqres.full 2>&1 || _fail "mkfs failed"
_scratch_mount

file=$SCRATCH_MNT/file
filesize=$((1024 * 1024 * 32))
pagesize=`$here/src/feature -s`
truncsize=$((filesize - pagesize))

for i in $(seq 0 15); do
	# Truncate the file and fsync to persist the final size on-disk. This is
	# required so the subsequent truncate will not wait on writeback.
	$XFS_IO_PROG -fc "truncate 0" $file
	$XFS_IO_PROG -c "truncate $filesize" -c fsync $file

	# create a small enough delalloc extent to likely be contiguous
	$XFS_IO_PROG -c "pwrite 0 $filesize" $file >> $seqres.full 2>&1

	# Start writeback and a racing truncate and rewrite of the final page.
	$XFS_IO_PROG -c "sync_range -w 0 0" $file &
	sync_pid=$!
	$XFS_IO_PROG -c "truncate $truncsize" \
		     -c "pwrite $truncsize $pagesize" $file >> $seqres.full 2>&1

	# If the test fails, the most likely outcome is an sb_fdblocks mismatch
	# and/or an associated delalloc assert failure on inode reclaim. Cycle
	# the mount to trigger detection.
	wait $sync_pid
	_scratch_cycle_mount
done

echo Silence is golden

# success, all done
status=0
exit
