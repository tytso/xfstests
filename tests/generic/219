#! /bin/bash
# SPDX-License-Identifier: GPL-2.0
# Copyright (c) 2009 Eric Sandeen.  All Rights Reserved.
# Copyright (c) 2005 Silicon Graphics, Inc.  All Rights Reserved.
#
# FS QA Test No. 219
#
# Simple quota accounting test for direct/buffered/mmap IO.
#
. ./common/preamble
_begin_fstest auto quota quick

# Import common functions.
. ./common/filter
. ./common/quota

_require_scratch
_require_quota
_require_user
_require_group
_require_odirect

test_files()
{
	echo; echo "### create files, setting up ownership (type=$type)"
	rm -f $SCRATCH_MNT/{buffer,direct,mmap}
	touch $SCRATCH_MNT/{buffer,direct,mmap}
	chown $qa_user $SCRATCH_MNT/{buffer,direct,mmap}
	chgrp $qa_group $SCRATCH_MNT/{buffer,direct,mmap}
	for file in $SCRATCH_MNT/{buffer,direct,mmap}; do
		$here/src/lstat64 $file | head -2 | _filter_scratch
	done
}

check_usage()
{
	wroteblocks=$1
	wrotefiles=$2
	read id exceed blocks bsoft bhard inodes isoft ihard
	if [ "$blocks" -lt "$wroteblocks" ]; then
		echo "Too few blocks used (type=$type)"
	# Save 5% for overhead of metadata or different block size
	elif [ "$blocks" -gt $((wroteblocks+wroteblocks/20)) ]; then
		echo "Too many blocks used (type=$type)"
	elif [ "$inodes" != "$wrotefiles" ]; then
		echo "Bad number of inodes used (type=$type)"
	else
		echo "Usage OK (type=$type)"
	fi
}

_round_up_to_fs_blksz()
{
	local n=$1
	local bs=$(_get_file_block_size "$SCRATCH_MNT")
	local bs_kb=$(( bs >> 10 ))

	echo $(( (n + bs_kb - 1) & ~(bs_kb - 1) ))
}

test_accounting()
{
	# Small ios here because ext3 will account for indirect blocks too ...
	# 48k will fit w/o indirect for 4k blocks (default blocksize)
	io_sz=$(_round_up_to_fs_blksz 48)
	sz=$(( io_sz * 3 ))

	echo "### some controlled buffered, direct and mmapd IO (type=$type)"
	echo "--- initiating parallel IO..." >>$seqres.full
	$XFS_IO_PROG -c 'pwrite 0 48k' -c 'fsync' \
					$SCRATCH_MNT/buffer >>$seqres.full 2>&1 &
	$XFS_IO_PROG -c 'pwrite 0 48k' -d \
					$SCRATCH_MNT/direct >>$seqres.full 2>&1 &
	$XFS_IO_PROG -c 't 48k' -c 'mm -rw 0 48k' -c 'mw 0 48k' -c 'ms -s' \
					$SCRATCH_MNT/mmap   >>$seqres.full 2>&1 &
	wait
	echo "--- completed parallel IO ($type)" >>$seqres.full

	for file in $SCRATCH_MNT/{buffer,direct,mmap}; do
		$here/src/lstat64 $file | head -2 | _filter_scratch
	done

	if [ $type == 'u' ]; then
		id=$qa_user
	else
		id=$qa_group
	fi
	repquota -$type $SCRATCH_MNT | grep "^$id" | check_usage $sz 3
}


_scratch_unmount 2>/dev/null
_scratch_mkfs >> $seqres.full 2>&1
_scratch_mount "-o usrquota,grpquota"
_force_vfs_quota_testing $SCRATCH_MNT
quotacheck -u -g $SCRATCH_MNT 2>/dev/null
quotaon $SCRATCH_MNT 2>/dev/null
_scratch_unmount

echo; echo "### test user accounting"
export MOUNT_OPTIONS="-o usrquota"
_qmount
quotaon $SCRATCH_MNT 2>/dev/null
type=u
test_files
test_accounting
_scratch_unmount 2>/dev/null

echo; echo "### test group accounting"
export MOUNT_OPTIONS="-o grpquota"
_qmount
quotaon $SCRATCH_MNT 2>/dev/null
type=g
test_files
test_accounting
_scratch_unmount 2>/dev/null

status=0
exit
