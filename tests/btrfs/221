#! /bin/bash
# SPDX-License-Identifier: GPL-2.0
# Copyright (C) 2020 SUSE Linux Products GmbH. All Rights Reserved.
#
# FS QA Test No. btrfs/221
#
# Test that an incremental send operation emits the correct path for link and
# rename operation after swapping the names and locations of several inodes in
# a way that creates a nasty dependency of rename and link operations. Notably
# one file has its name and location swapped with a directory for which it used
# to have a directory entry in it.
#
. ./common/preamble
_begin_fstest auto quick send

# Override the default cleanup function.
_cleanup()
{
	cd /
	rm -fr $send_files_dir
	rm -f $tmp.*
}

# Import common functions.
. ./common/filter

# real QA test starts here
_supported_fs btrfs
_require_test
_require_scratch
_require_fssum

send_files_dir=$TEST_DIR/btrfs-test-$seq

rm -fr $send_files_dir
mkdir $send_files_dir

_scratch_mkfs >>$seqres.full 2>&1
_scratch_mount

touch $SCRATCH_MNT/a
touch $SCRATCH_MNT/b
mkdir $SCRATCH_MNT/testdir
# We want "a" to have a lower inode number than its parent directory, so it
# was created before the directory and then moved into it.
mv $SCRATCH_MNT/a $SCRATCH_MNT/testdir/a

# Filesystem looks like:
#
# .                                                      (ino 256)
# |----- testdir/                                        (ino 259)
# |          |----- a                                    (ino 257)
# |
# |----- b                                               (ino 258)
#
$BTRFS_UTIL_PROG subvolume snapshot -r $SCRATCH_MNT \
	$SCRATCH_MNT/mysnap1 > /dev/null

$BTRFS_UTIL_PROG send -f $send_files_dir/1.snap \
	$SCRATCH_MNT/mysnap1 2>&1 1>/dev/null | _filter_scratch

# Now rename 259 to "testdir_2", then change the name of 257 to "testdir" and
# make it a direct descendant of the root inode (256). Also create a new link
# for inode 257 with the old name of inode 258. By swapping the names and
# location of several inodes and create a nasty dependency chain of rename and
# link operations.
mv $SCRATCH_MNT/testdir/a $SCRATCH_MNT/a2
touch $SCRATCH_MNT/testdir/a
mv $SCRATCH_MNT/b $SCRATCH_MNT/b2
ln $SCRATCH_MNT/a2 $SCRATCH_MNT/b
mv $SCRATCH_MNT/testdir $SCRATCH_MNT/testdir_2
mv $SCRATCH_MNT/a2 $SCRATCH_MNT/testdir

# Filesystem now looks like:
#
# .                                                      (ino 256)
# |----- testdir_2/                                      (ino 259)
# |          |----- a                                    (ino 260)
# |
# |----- testdir                                         (ino 257)
# |----- b                                               (ino 257)
# |----- b2                                              (ino 258)
#

$BTRFS_UTIL_PROG subvolume snapshot -r $SCRATCH_MNT \
		 $SCRATCH_MNT/mysnap2 > /dev/null
$BTRFS_UTIL_PROG send -p $SCRATCH_MNT/mysnap1 -f $send_files_dir/2.snap \
		 $SCRATCH_MNT/mysnap2 2>&1 1>/dev/null | _filter_scratch

$FSSUM_PROG -A -f -w $send_files_dir/1.fssum $SCRATCH_MNT/mysnap1
$FSSUM_PROG -A -f -w $send_files_dir/2.fssum \
	-x $SCRATCH_MNT/mysnap2/mysnap1 $SCRATCH_MNT/mysnap2

# Now recreate the filesystem by receiving both send streams and verify we get
# the same content that the original filesystem had.
_scratch_unmount
_scratch_mkfs >>$seqres.full 2>&1
_scratch_mount

$BTRFS_UTIL_PROG receive -f $send_files_dir/1.snap $SCRATCH_MNT > /dev/null

# The receive operation below used to fail because when attemping to create the
# hard link named "b" for inode 257, the link operation contained a target path
# of "o259-6-0/a", which caused the receiver process to fail because inode 259
# was not yet orphanized (renamed to "o259-6-0"), it still had the name "testdir"
# when the link operation was issued.
$BTRFS_UTIL_PROG receive -f $send_files_dir/2.snap $SCRATCH_MNT > /dev/null

$FSSUM_PROG -r $send_files_dir/1.fssum $SCRATCH_MNT/mysnap1
$FSSUM_PROG -r $send_files_dir/2.fssum $SCRATCH_MNT/mysnap2

status=0
exit
