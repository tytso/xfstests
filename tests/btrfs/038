#! /bin/bash
# SPDX-License-Identifier: GPL-2.0
# Copyright (c) 2014 Filipe Manana.  All Rights Reserved.
#
# FS QA Test No. btrfs/038
#
# Test for a btrfs incremental send issue where we end up sending a
# wrong section of data from a file extent if the corresponding file
# extent is compressed and the respective file extent item has a non
# zero data offset.
#
# Fixed by the following linux kernel btrfs patch:
#
#   Btrfs: use right clone root offset for compressed extents
#
. ./common/preamble
_begin_fstest auto quick compress send

tmp=`mktemp -d`

# Override the default cleanup function.
_cleanup()
{
    rm -fr $tmp
}

# Import common functions.
. ./common/filter

# real QA test starts here
_supported_fs btrfs
_require_scratch
_require_fssum

_scratch_mkfs >/dev/null 2>&1
_scratch_mount "-o compress-force=lzo"

$XFS_IO_PROG -f -c "truncate 118811" $SCRATCH_MNT/foo
$XFS_IO_PROG -c "pwrite -S 0x0d -b 39987 92267 39987" \
	$SCRATCH_MNT/foo | _filter_xfs_io

_run_btrfs_util_prog subvolume snapshot -r $SCRATCH_MNT \
	$SCRATCH_MNT/mysnap1

$XFS_IO_PROG -c "pwrite -S 0x3e -b 80000 200000 80000" \
	$SCRATCH_MNT/foo | _filter_xfs_io

# Sync to avoid btrfs merging file extent items, which would make the test
# succeed when it should fail.
_run_btrfs_util_prog filesystem sync $SCRATCH_MNT

$XFS_IO_PROG -c "pwrite -S 0xdc -b 10000 250000 10000" \
	$SCRATCH_MNT/foo | _filter_xfs_io
$XFS_IO_PROG -c "pwrite -S 0xff -b 10000 300000 10000" \
	$SCRATCH_MNT/foo | _filter_xfs_io

# will be used for incremental send to be able to issue clone operations
_run_btrfs_util_prog subvolume snapshot -r $SCRATCH_MNT \
	$SCRATCH_MNT/clones_snap

_run_btrfs_util_prog subvolume snapshot -r $SCRATCH_MNT \
	$SCRATCH_MNT/mysnap2

run_check $FSSUM_PROG -A -f -w $tmp/1.fssum $SCRATCH_MNT/mysnap1
run_check $FSSUM_PROG -A -f -w $tmp/2.fssum -x $SCRATCH_MNT/mysnap2/mysnap1 \
	-x $SCRATCH_MNT/mysnap2/clones_snap $SCRATCH_MNT/mysnap2
run_check $FSSUM_PROG -A -f -w $tmp/clones.fssum $SCRATCH_MNT/clones_snap \
	-x $SCRATCH_MNT/clones_snap/mysnap1 -x $SCRATCH_MNT/clones_snap/mysnap2

_run_btrfs_util_prog send -f $tmp/1.snap $SCRATCH_MNT/mysnap1
_run_btrfs_util_prog send -f $tmp/clones.snap $SCRATCH_MNT/clones_snap
_run_btrfs_util_prog send -p $SCRATCH_MNT/mysnap1 \
	-c $SCRATCH_MNT/clones_snap -f $tmp/2.snap $SCRATCH_MNT/mysnap2

_scratch_unmount
_check_btrfs_filesystem $SCRATCH_DEV

_scratch_mkfs >/dev/null 2>&1
_scratch_mount

_run_btrfs_util_prog receive -f $tmp/1.snap $SCRATCH_MNT
run_check $FSSUM_PROG -r $tmp/1.fssum $SCRATCH_MNT/mysnap1 2>> $seqres.full

_run_btrfs_util_prog receive -f $tmp/clones.snap $SCRATCH_MNT
run_check $FSSUM_PROG -r $tmp/clones.fssum $SCRATCH_MNT/clones_snap 2>> $seqres.full

_run_btrfs_util_prog receive -f $tmp/2.snap $SCRATCH_MNT
run_check $FSSUM_PROG -r $tmp/2.fssum $SCRATCH_MNT/mysnap2 2>> $seqres.full

_scratch_unmount
_check_btrfs_filesystem $SCRATCH_DEV

status=0
exit
