#! /bin/bash
# SPDX-License-Identifier: GPL-2.0
# Copyright (c) 2017 Oracle.  All Rights Reserved.
#
# FS QA Test 158
#
# The test case is check if scrub is able fix raid6 data corruption,
# ie. if there is data corruption on two disks in the same horizontal
# stripe, e.g.  due to bitrot.
#
# The kernel fixes are
#	Btrfs: make raid6 rebuild retry more
#	Btrfs: fix scrub to repair raid6 corruption
#
. ./common/preamble
_begin_fstest auto quick raid scrub

# Import common functions.
. ./common/filter

# real QA test starts here

# Modify as appropriate.
_supported_fs btrfs
_require_scratch_dev_pool 4
_require_btrfs_command inspect-internal dump-tree
_require_btrfs_fs_feature raid56

get_physical()
{
	local stripe=$1
	$BTRFS_UTIL_PROG inspect-internal dump-tree -t 3 $SCRATCH_DEV | \
		grep " DATA\|RAID6" -A 10 | \
		$AWK_PROG "(\$1 ~ /stripe/ && \$3 ~ /devid/ && \$2 ~ /$stripe/) { print \$6 }"
}

get_devid()
{
	local stripe=$1
	$BTRFS_UTIL_PROG inspect-internal dump-tree -t 3 $SCRATCH_DEV | \
		grep " DATA\|RAID6" -A 10 | \
		$AWK_PROG "(\$1 ~ /stripe/ && \$3 ~ /devid/ && \$2 ~ /$stripe/) { print \$4 }"
}

get_device_path()
{
	local devid=$1
	echo "$SCRATCH_DEV_POOL" | $AWK_PROG "{print \$$devid}"
}

_scratch_dev_pool_get 4
# step 1: create a raid6 btrfs and create a 128K file
echo "step 1......mkfs.btrfs" >>$seqres.full

mkfs_opts="-d raid6 -b 1G"
_scratch_pool_mkfs $mkfs_opts >>$seqres.full 2>&1

# -o nospace_cache makes sure data is written to the start position of the data
# chunk
_scratch_mount -o nospace_cache

# [0,64K) is written to stripe 0 and [64K, 128K) is written to stripe 1
$XFS_IO_PROG -f -d -c "pwrite -S 0xaa 0 128K" -c "fsync" \
	"$SCRATCH_MNT/foobar" | _filter_xfs_io

_scratch_unmount

phy0=$(get_physical 0)
devid0=$(get_devid 0)
devpath0=$(get_device_path $devid0)
phy1=$(get_physical 1)
devid1=$(get_devid 1)
devpath1=$(get_device_path $devid1)

# step 2: corrupt the 1st and 2nd stripe (stripe 0 and 1)
echo "step 2......simulate bitrot at:" >>$seqres.full
echo "      ......stripe #0: devid $devid0 devpath $devpath0 phy $phy0" \
	>>$seqres.full
echo "      ......stripe #1: devid $devid1 devpath $devpath1 phy $phy1" \
	>>$seqres.full

$XFS_IO_PROG -f -d -c "pwrite -S 0xbb $phy0 64K" $devpath0 > /dev/null
$XFS_IO_PROG -f -d -c "pwrite -S 0xbb $phy1 64K" $devpath1 > /dev/null

# step 3: scrub filesystem to repair the bitrot
echo "step 3......repair the bitrot" >> $seqres.full
_scratch_mount -o nospace_cache

$BTRFS_UTIL_PROG scrub start -B $SCRATCH_MNT >> $seqres.full 2>&1

od -x $SCRATCH_MNT/foobar

_scratch_dev_pool_put

# success, all done
status=0
exit
