#! /bin/bash
# SPDX-License-Identifier: GPL-2.0
# Copyright (c) 2014 Filipe Manana.  All Rights Reserved.
#
# FS QA Test No. btrfs/053
#
# Verify that btrfs send is able to replicate xattrs larger than PATH_MAX.
# This is possible if the b+tree leaf size is larger than 4Kb (mkfs.btrfs's
# default is max(16Kb, PAGE_SIZE) as of btrfs-progs v3.12, and max(4Kb,
# PAGE_SIZE in older versions).
#
# This issue is fixed by the following linux kernel btrfs patch:
#
#   Btrfs: send, use the right limits for xattr names and values
#
. ./common/preamble
_begin_fstest auto quick send

# Override the default cleanup function.
_cleanup()
{
    rm -fr $send_files_dir
    rm -fr $tmp
}

# Import common functions.
. ./common/filter
. ./common/attr

# real QA test starts here
_supported_fs btrfs
_require_test
_require_scratch
_require_fssum
_require_attrs

# max(16384, PAGE_SIZE) is the default leaf/node size on btrfs-progs v3.12+.
# Older versions just use max(4096, PAGE_SIZE).
# mkfs.btrfs can't create an fs with a leaf/node size smaller than PAGE_SIZE.
leaf_size=$(echo -e "16384\n`getconf PAGE_SIZE`" | sort -nr | head -1)

send_files_dir=$TEST_DIR/btrfs-test-$seq

rm -fr $send_files_dir
mkdir $send_files_dir

_scratch_mkfs "-l $leaf_size" >/dev/null 2>&1
_scratch_mount

echo "hello world" > $SCRATCH_MNT/foobar

$SETFATTR_PROG -n user.xattr_name_1 -v `$PERL_PROG -e 'print "A" x 6000;'` \
	$SCRATCH_MNT/foobar

_run_btrfs_util_prog subvolume snapshot -r $SCRATCH_MNT $SCRATCH_MNT/mysnap1
run_check $FSSUM_PROG -A -f -w $send_files_dir/1.fssum $SCRATCH_MNT/mysnap1

# Update existing xattr value and add a new xattr too.
$SETFATTR_PROG -n user.xattr_name_1 -v `$PERL_PROG -e 'print "Z" x 6666;'` \
	$SCRATCH_MNT/foobar
$SETFATTR_PROG -n user.xattr_name_2 -v `$PERL_PROG -e 'print "U" x 5555;'` \
	$SCRATCH_MNT/foobar

_run_btrfs_util_prog subvolume snapshot -r $SCRATCH_MNT $SCRATCH_MNT/mysnap2
run_check $FSSUM_PROG -A -f -w $send_files_dir/2.fssum \
	-x $SCRATCH_MNT/mysnap2/mysnap1 $SCRATCH_MNT/mysnap2

_run_btrfs_util_prog send -f $send_files_dir/1.snap $SCRATCH_MNT/mysnap1
_run_btrfs_util_prog send -p $SCRATCH_MNT/mysnap1 -f $send_files_dir/2.snap \
	$SCRATCH_MNT/mysnap2

_scratch_unmount
_check_scratch_fs

_scratch_mkfs "-l $leaf_size" >/dev/null 2>&1
_scratch_mount

_run_btrfs_util_prog receive -f $send_files_dir/1.snap $SCRATCH_MNT
run_check $FSSUM_PROG -r $send_files_dir/1.fssum $SCRATCH_MNT/mysnap1

_run_btrfs_util_prog receive -f $send_files_dir/2.snap $SCRATCH_MNT
run_check $FSSUM_PROG -r $send_files_dir/2.fssum $SCRATCH_MNT/mysnap2

status=0
exit
