#! /bin/bash
# SPDX-License-Identifier: GPL-2.0
# Copyright (c) 2013 Fusion IO.  All Rights Reserved.
#
# FS QA Test No. btrfs/019
#
# btrfs send ENOENT regression test, kernel bugzilla 60673
#
. ./common/preamble
_begin_fstest auto quick send

tmp_dir=send_temp_$seq

# Override the default cleanup function.
_cleanup()
{
	$BTRFS_UTIL_PROG subvolume delete $TEST_DIR/$tmp_dir/snap1 > /dev/null 2>&1
	$BTRFS_UTIL_PROG subvolume delete $TEST_DIR/$tmp_dir/snap2 > /dev/null 2>&1
	$BTRFS_UTIL_PROG subvolume delete $TEST_DIR/$tmp_dir/send > /dev/null 2>&1
	rm -rf $TEST_DIR/$tmp_dir
	rm -f $tmp.*
}

# Import common functions.
. ./common/filter

# real QA test starts here
_supported_fs btrfs
_require_test
_require_scratch

_scratch_mkfs > /dev/null 2>&1

#receive needs to be able to setxattrs, including the selinux context, if we use
#the normal nfs context thing it screws up our ability to set the
#security.selinux xattrs so we need to disable this for this test
export SELINUX_MOUNT_OPTIONS=""

_scratch_mount

mkdir $TEST_DIR/$tmp_dir
$BTRFS_UTIL_PROG subvolume create $TEST_DIR/$tmp_dir/send \
	> $seqres.full 2>&1 || _fail "failed subvolume create"

SEND_TEST_DIR=$TEST_DIR/$tmp_dir/send

mkdir $SEND_TEST_DIR/test
touch $SEND_TEST_DIR/test/baz
touch $SEND_TEST_DIR/test/blah
mkdir $SEND_TEST_DIR/test/foo
touch $SEND_TEST_DIR/test/foo/bar

$BTRFS_UTIL_PROG subvolume snapshot -r $TEST_DIR/$tmp_dir/send \
	$TEST_DIR/$tmp_dir/snap1 >> $seqres.full 2>&1 || _fail "failed snap1"

$BTRFS_UTIL_PROG send -f $TEST_DIR/$tmp_dir/send1.dump \
	$TEST_DIR/$tmp_dir/snap1 >> $seqres.full 2>&1 || _fail "failed send"

$BTRFS_UTIL_PROG receive -f $TEST_DIR/$tmp_dir/send1.dump $SCRATCH_MNT \
	>> $seqres.full 2>&1 || _fail "failed receive"

#recreate everything exactly the way it was exceptn in a different order so we
#get different inode numbers
rm -rf $SEND_TEST_DIR/test
mkdir $SEND_TEST_DIR/test
touch $SEND_TEST_DIR/test/baz
mkdir $SEND_TEST_DIR/test/foo
touch $SEND_TEST_DIR/test/foo/bar
touch $SEND_TEST_DIR/test/blah

$BTRFS_UTIL_PROG subvolume snapshot -r $TEST_DIR/$tmp_dir/send \
	$TEST_DIR/$tmp_dir/snap2 >> $seqres.full 2>&1 || _fail "failed snap2"

$BTRFS_UTIL_PROG send -f $TEST_DIR/$tmp_dir/send2.dump \
	-p $TEST_DIR/$tmp_dir/snap1 $TEST_DIR/$tmp_dir/snap2 \
	>> $seqres.full 2>&1 || _fail "failed second send"

$BTRFS_UTIL_PROG receive -f $TEST_DIR/$tmp_dir/send2.dump $SCRATCH_MNT \
	>> $seqres.full 2>&1 || _fail "failed second receive"

echo "Silence is golden"
status=0 ; exit
