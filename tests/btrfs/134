#! /bin/bash
# SPDX-License-Identifier: GPL-2.0
# Copyright (C) 2017 Synology Inc. All Rights Reserved.
#
# FS QA Test No. btrfs/134
#
# Test that an incremental send operation works after moving a directory into
# a new parent directory, deleting its previous parent directory and creating
# a new inode that has the same inode number as the old parent.
#
. ./common/preamble
_begin_fstest auto quick send

# Override the default cleanup function.
_cleanup()
{
	cd /
	rm -fr $send_files_dir
	rm -f $tmp.*
}

# Import common functions.
. ./common/filter

# real QA test starts here
_supported_fs btrfs
_require_test
_require_scratch
_require_fssum

send_files_dir=$TEST_DIR/btrfs-test-$seq

rm -fr $send_files_dir
mkdir $send_files_dir

_scratch_mkfs >>$seqres.full 2>&1
_scratch_mount

mkdir $SCRATCH_MNT/dir257
mkdir $SCRATCH_MNT/dir258
mkdir $SCRATCH_MNT/dir259
mv $SCRATCH_MNT/dir257 $SCRATCH_MNT/dir258/dir257

# Filesystem looks like:
#
# .                                                             (ino 256, gen 3)
# |--- dir258/                                                  (ino 258, gen 7)
# |       |--- dir257/                                          (ino 257, gen 7)
# |
# |--- dir259/                                                  (ino 259, gen 7)
#
$BTRFS_UTIL_PROG subvolume snapshot -r $SCRATCH_MNT \
    $SCRATCH_MNT/mysnap1 > /dev/null

mv $SCRATCH_MNT/dir258/dir257 $SCRATCH_MNT/dir257
rmdir $SCRATCH_MNT/dir258
rmdir $SCRATCH_MNT/dir259
# Remount the filesystem so that the next created inodes will have the numbers
# 258 and 259. This is because when a filesystem is mounted, btrfs sets the
# subvolume's inode counter to a value corresponding to the highest inode number
# in the subvolume plus 1. This inode counter is used to assign a unique number
# to each new inode and it's incremented by 1 after very inode creation.
# Note: we unmount and then mount instead of doing a mount with "-o remount"
# because otherwise the inode counter remains at value 260.
_scratch_cycle_mount
touch $SCRATCH_MNT/file258
mkdir $SCRATCH_MNT/new_dir259
mv $SCRATCH_MNT/dir257 $SCRATCH_MNT/new_dir259/dir257

# Filesystem now looks like:
#
# .                                                            (ino 256, gen 3)
# |--- file258                                                 (ino 258, gen 10)
# |
# |--- new_dir259/                                             (ino 259, gen 10)
#          |--- dir257/                                        (ino 257, gen 7)
#
$BTRFS_UTIL_PROG subvolume snapshot -r $SCRATCH_MNT \
		 $SCRATCH_MNT/mysnap2 > /dev/null

$FSSUM_PROG -A -f -w $send_files_dir/1.fssum $SCRATCH_MNT/mysnap1
$FSSUM_PROG -A -f -w $send_files_dir/2.fssum \
        -x $SCRATCH_MNT/mysnap2/mysnap1 $SCRATCH_MNT/mysnap2

$BTRFS_UTIL_PROG send -f $send_files_dir/1.snap \
	$SCRATCH_MNT/mysnap1 2>&1 1>/dev/null | _filter_scratch
$BTRFS_UTIL_PROG send -p $SCRATCH_MNT/mysnap1 -f $send_files_dir/2.snap \
	$SCRATCH_MNT/mysnap2 2>&1 1>/dev/null | _filter_scratch

# Now recreate the filesystem by receiving both send streams and verify we get
# the same content that the original filesystem had.
_scratch_unmount
_scratch_mkfs >>$seqres.full 2>&1
_scratch_mount

$BTRFS_UTIL_PROG receive -f $send_files_dir/1.snap $SCRATCH_MNT > /dev/null
$FSSUM_PROG -r $send_files_dir/1.fssum $SCRATCH_MNT/mysnap1
$BTRFS_UTIL_PROG receive -f $send_files_dir/2.snap $SCRATCH_MNT > /dev/null
$FSSUM_PROG -r $send_files_dir/2.fssum $SCRATCH_MNT/mysnap2

status=0
exit
