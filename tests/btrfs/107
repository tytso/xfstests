#! /bin/bash
# SPDX-License-Identifier: GPL-2.0
# Copyright (c) 2015 Fujitsu. All Rights Reserved.
#
# FS QA Test 107
#
# Test that calling fallocate against a range which is already
# allocated does not truncate beyond EOF
#
. ./common/test_names
_set_seq_and_groups auto quick prealloc

trap "_cleanup; exit \$status" 0 1 2 3 15

_cleanup()
{
	cd /
	rm -f $tmp.*
}

# get standard environment, filters and checks
. ./common/rc
. ./common/filter
. ./common/defrag

# remove previous $seqres.full before test
rm -f $seqres.full

# real QA test starts here

_supported_fs btrfs
_require_scratch
_require_xfs_io_command "falloc"

# Use 64K file size to match any sectorsize
# And with a unaligned tailing range to ensure it will be at least 2 pages
filesize=$(( 64 * 1024 + 1024 ))

# Fallocate a range that will not cover the tailing page
fallocrange=$(( 64 * 1024 ))

_scratch_mkfs > /dev/null 2>&1
_scratch_mount
$XFS_IO_PROG -f -c "pwrite 0 $filesize" $SCRATCH_MNT/foo | _filter_xfs_io
sync
orig_extent_nr=`_extent_count $SCRATCH_MNT/foo`

# As all space are allocated and even written to disk, this falloc
# should do nothing with extent modification.
$XFS_IO_PROG -f -c "falloc 0 $fallocrange" $SCRATCH_MNT/foo
sync
new_extent_nr=`_extent_count $SCRATCH_MNT/foo`

echo "orig: $orig_extent_nr, new: $new_extent_nr" >> $seqres.full

if [ "x$orig_extent_nr" != "x$new_extent_nr" ]; then
	echo "Extent beyond EOF is re-truncated"
	echo "orig_extent_nr: $orig_extent_nr new_extent_nr: $new_extent_nr"
fi

# success, all done
status=0
exit
