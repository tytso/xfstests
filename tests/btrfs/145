#! /bin/bash
# SPDX-License-Identifier: GPL-2.0
# Copyright (C) 2017 SUSE Linux Products GmbH. All Rights Reserved.
#
# FS QA Test No. btrfs/145
#
# Test that an incremental send works if we rename some directory inode A and
# then rename some file inode B to the name inode A had, for the case where the
# directory inode A is an ancestor of inode B in the parent snapshot.
#
. ./common/preamble
_begin_fstest auto quick send

# Override the default cleanup function.
_cleanup()
{
	cd /
	rm -fr $send_files_dir
	rm -f $tmp.*
}

# Import common functions.
. ./common/filter

# real QA test starts here
_supported_fs btrfs
_require_test
_require_scratch
_require_fssum

send_files_dir=$TEST_DIR/btrfs-test-$seq

rm -fr $send_files_dir
mkdir $send_files_dir

_scratch_mkfs >>$seqres.full 2>&1
_scratch_mount

mkdir $SCRATCH_MNT/dir1
mkdir $SCRATCH_MNT/dir1/dir2
touch $SCRATCH_MNT/dir1/dir2/file1
touch $SCRATCH_MNT/dir1/dir2/file2
touch $SCRATCH_MNT/dir1/dir2/file3
mkdir $SCRATCH_MNT/dir1/dir3
mv $SCRATCH_MNT/dir1/dir2/file2 $SCRATCH_MNT/dir1/dir3/file22
mkdir $SCRATCH_MNT/dir1/dir3/dir4

# Filesystem looks like:
#
# .                                                      (ino 256)
# |
# |--- dir1/                                             (ino 257)
#       |--- dir2/                                       (ino 258)
#       |     |--- file1                                 (ino 259)
#       |     |--- file3                                 (ino 261)
#       |
#       |--- dir3/                                       (ino 262)
#             |--- file22                                (ino 260)
#             |--- dir4/                                 (ino 263)
#
$BTRFS_UTIL_PROG subvolume snapshot -r $SCRATCH_MNT \
	$SCRATCH_MNT/mysnap1 > /dev/null

$BTRFS_UTIL_PROG send -f $send_files_dir/1.snap \
	$SCRATCH_MNT/mysnap1 2>&1 1>/dev/null | _filter_scratch

mv $SCRATCH_MNT/dir1/dir2/file3 $SCRATCH_MNT/dir1/dir3/dir4/file33
mv $SCRATCH_MNT/dir1/dir2/file1 $SCRATCH_MNT/dir1/dir3/dir4/file11
mv $SCRATCH_MNT/dir1/dir3 $SCRATCH_MNT/dir1/file3
mv $SCRATCH_MNT/dir1/file3/file22 $SCRATCH_MNT/dir1/dir3

# Filesystem now looks like:
#
# .                                                      (ino 256)
# |
# |--- dir1/                                             (ino 257)
#       |--- dir2/                                       (ino 258)
#       |--- dir3                                        (ino 260)
#       |--- file3/                                      (ino 262)
#             |--- dir4/                                 (ino 263)
#                   |--- file11                          (ino 269)
#                   |--- file33                          (ino 261)
#
$BTRFS_UTIL_PROG subvolume snapshot -r $SCRATCH_MNT \
		 $SCRATCH_MNT/mysnap2 > /dev/null

$BTRFS_UTIL_PROG send -p $SCRATCH_MNT/mysnap1 -f $send_files_dir/2.snap \
		 $SCRATCH_MNT/mysnap2 2>&1 1>/dev/null | _filter_scratch

$FSSUM_PROG -A -f -w $send_files_dir/1.fssum $SCRATCH_MNT/mysnap1
$FSSUM_PROG -A -f -w $send_files_dir/2.fssum \
	-x $SCRATCH_MNT/mysnap2/mysnap1 $SCRATCH_MNT/mysnap2

# Now recreate the filesystem by receiving both send streams and verify we get
# the same content that the original filesystem had.
_scratch_unmount
_scratch_mkfs >>$seqres.full 2>&1
_scratch_mount

$BTRFS_UTIL_PROG receive -f $send_files_dir/1.snap $SCRATCH_MNT > /dev/null
$BTRFS_UTIL_PROG receive -f $send_files_dir/2.snap $SCRATCH_MNT > /dev/null
$FSSUM_PROG -r $send_files_dir/1.fssum $SCRATCH_MNT/mysnap1
$FSSUM_PROG -r $send_files_dir/2.fssum $SCRATCH_MNT/mysnap2

status=0
exit
