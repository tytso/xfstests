#! /bin/bash
# SPDX-License-Identifier: GPL-2.0
# Copyright (c) 2006 Silicon Graphics, Inc.  All Rights Reserved.
#
# FSQA Test No. 271
#
# Regression testcase for d583fb87a3ff0 (ext4 extent corruption)
#
. ./common/preamble
_begin_fstest auto rw quick

# Import common functions.
. ./common/filter

# real QA test starts here
_supported_fs ext4
_require_scratch
# this test needs no journal to be loaded, skip on journal related mount
# options, otherwise mount would fail with "-o noload" mount option
_exclude_scratch_mount_option "data" "commit" "journal_checksum" \
			      "journal_async_commit"

_scratch_mkfs_sized $((128 * 1024 * 1024)) >> $seqres.full 2>&1

# -onoload and EXT4_SYNC_FL on file is important becase result in
# metadata sync writes inside ext4_handle_dirty_metadata()
_scratch_mount -onoload
touch $SCRATCH_MNT/file
$CHATTR_PROG +S $SCRATCH_MNT/file
# Create sparse file 
for ((i = 0; i < 21; i++))
do
    dd if=/dev/zero of=$SCRATCH_MNT/file bs=4k count=1 seek=$((i*10))
done
# truncate last extent
$XFS_IO_PROG -f -c "truncate $((4096*200))" $SCRATCH_MNT/file

if ! _scratch_unmount; then
	echo "failed to umount"
	status=1
	exit
fi
echo "Check filesystem"
status=0
exit
