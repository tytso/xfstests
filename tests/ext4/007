#! /bin/bash
# SPDX-License-Identifier: GPL-2.0
# Copyright (c) 2015 Oracle, Inc.  All Rights Reserved.
#
# FS QA Test No. 007
#
# Create and populate an ext4 filesystem, corrupt the primary superblock, then
# see how the kernel and e2fsck deal with it.
#
. ./common/preamble
_begin_fstest fuzzers

# Override the default cleanup function.
_cleanup()
{
    cd /
    #rm -f $tmp.*
}

# Import common functions.
. ./common/filter
. ./common/attr

# real QA test starts here
_supported_fs ext4

_require_scratch
test -n "${FORCE_FUZZ}" || _require_scratch_ext4_crc
_require_attrs

TESTDIR="${SCRATCH_MNT}/scratchdir"
TESTFILE="${TESTDIR}/testfile"

echo "+ create scratch fs"
_scratch_mkfs_ext4 > /dev/null 2>&1
dumpe2fs -g "${SCRATCH_DEV}" > /dev/null 2>&1 || _notrun "dumpe2fs -g not supported"

echo "+ mount fs image"
_scratch_mount
blksz="$(stat -f -c '%s' "${SCRATCH_MNT}")"
nr_groups="$(dumpe2fs -g "${SCRATCH_DEV}" 2> /dev/null | tail -n 1 | cut -d : -f 1)"
test "${nr_groups}" -gt 0 || _notrun "scratch device not big enough for backup superblocks"
backup_sb="$(dumpe2fs -g "${SCRATCH_DEV}" 2> /dev/null | awk -F ':' 'BEGIN {x = 0;} {if (x == 0 && int($3) > 1) {print $3; x++;}}')"

echo "+ make some files"
mkdir -p "${TESTDIR}"
for x in `seq 1 128`; do
	touch "${SCRATCH_MNT}/junk.${x}"
	inode="$(stat -c '%i' "${SCRATCH_MNT}/junk.${x}")"
	if [ "$x" -gt 64 ] && [ "$((inode % 64))" -eq 0 ]; then
		mv "${SCRATCH_MNT}/junk.${x}" "${TESTFILE}.1"
		break
	fi
done
for x in `seq 2 64`; do
	touch "${TESTFILE}.${x}"
done
umount "${SCRATCH_MNT}"

echo "+ check fs"
e2fsck -fn "${SCRATCH_DEV}" >> $seqres.full 2>&1 || _fail "fsck should not fail"

echo "+ corrupt image"
dumpe2fs -g "${SCRATCH_DEV}" 2>/dev/null | awk -F ':' '{if ($1 == 0) {print $3}}' | while read blk; do
	debugfs -w -R "zap_block ${blk}" "${SCRATCH_DEV}" >> $seqres.full 2>&1 || _fail "primary sb fuzz failed"
done

echo "+ mount image"
_try_scratch_mount 2> /dev/null && _fail "mount should not succeed"

echo "+ repair fs"
# Have to specify backup sb and blocksize here so we don't pick up superblocks
# scattered elsewhere on the scratch device.
echo e2fsck -f -y -B "${blksz}" -b "${backup_sb}" "${SCRATCH_DEV}" >> $seqres.full 2>&1
e2fsck -f -y -B "${blksz}" -b "${backup_sb}" "${SCRATCH_DEV}" >> $seqres.full 2>&1

echo "+ mount image (2)"
_scratch_mount

echo "+ chattr -R -i"
$CHATTR_PROG -R -f -i "${SCRATCH_MNT}/"

echo "+ modify files (2)"
broken=0
for x in `seq 1 64`; do
	test -e "${TESTFILE}.${x}" || continue
	stat "${TESTFILE}.${x}" >> /dev/null 2>&1
	test $? -ne 0 && broken=1
	echo moo | dd oflag=append of="${TESTFILE}.${x}" 2>/dev/null
	test $? -ne 0 && broken=1
done
echo "broken: ${broken}"
umount "${SCRATCH_MNT}"

echo "+ check fs (2)"
e2fsck -fn "${SCRATCH_DEV}" >> $seqres.full 2>&1 || _fail "fsck should not fail"

status=0
exit
