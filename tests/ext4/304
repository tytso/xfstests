#! /bin/bash
# SPDX-License-Identifier: GPL-2.0

#
# FSQA Test No. 304
#
# Ext4 defragmentation stress test
# Several threads perform defragmentation at random position
# using 'inplace' mode (allocate and free blocks inside defrag event)
# which significantly improve load pressure on block allocator.
. ./common/preamble
_begin_fstest aio auto ioctl rw stress defrag

fio_config=$tmp.fio

# Import common functions.
. ./common/filter
. ./common/defrag

# real QA test starts here
_supported_fs ext4
_require_scratch
_require_defrag
_require_odirect

BLK_DEV_SIZE=`blockdev --getsz $SCRATCH_DEV`
# We need space for 2 files (test file, and donor one)
# reserve 30% in order to avoid ENOSPC
FILE_SIZE=$((BLK_DEV_SIZE * (512 / (2 + 1))))

cat >$fio_config <<EOF
# Common e4defrag regression tests
[global]
ioengine=ioe_e4defrag
iodepth=1
directory=${SCRATCH_MNT}
filesize=${FILE_SIZE}
size=999G
buffered=0
fadvise_hint=0
continue_on_error=write
ignore_error=,EINVAL:61

#################################
# Test4
# Stress test defragmentation engine
# Several threads perform defragmentation at random position
# use inplace=1 will allocate and free blocks inside defrag event
# which highly increase defragmentation
[defrag-fuzzer]
ioengine=e4defrag
iodepth=1
bs=8k
donorname=test4.def
filename=test4
inplace=1
rw=randwrite
numjobs=4*${LOAD_FACTOR}
runtime=30*${TIME_FACTOR}
time_based

[aio-dio-verifier]
ioengine=libaio
iodepth=128
iomem_align=4k
numjobs=1
verify=crc32c-intel
verify_fatal=1
verify_dump=1
verify_backlog=1024
verify_async=1
verifysort=1
direct=1
bs=64k
rw=write
filename=test4
runtime=30*${TIME_FACTOR}
time_based

EOF

_workout()
{
	echo ""
	echo " Start defragment activity"
	echo ""
	cat $fio_config >>  $seqres.full
	run_check $FIO_PROG $fio_config
}

_require_fio $fio_config

_scratch_mkfs  >> $seqres.full 2>&1
_scratch_mount

if ! _workout; then
	_scratch_unmount 2>/dev/null
	exit
fi

if ! _scratch_unmount; then
	echo "failed to umount"
	status=1
	exit
fi
status=0
exit
