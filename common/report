#
# Reports generator funcitons lives here
#

# List of xfstests's enviroment variables to include reports
## TODO automate list population inside common/conf
REPORT_ENV_LIST=("SECTION" "FSTYP" "PLATFORM" "MKFS_OPTIONS" "MOUNT_OPTIONS" \
		 "HOST_OPTIONS" "CHECK_OPTIONS" "XFS_MKFS_OPTIONS" \
		 "TIME_FACTOR" "LOAD_FACTOR" "TEST_DIR" "TEST_DEV" \
		 "SCRATCH_DEV" "SCRATCH_MNT" "OVL_UPPER" "OVL_LOWER" "OVL_WORK")

encode_xml()
{
	cat -v | \
	    sed -e 's/&/\&amp;/g' \
		-e 's/>/\&gt;/g' \
		-e 's/</\&lt;/g' \
		-e "s/'/\&apos;/g" \
		-e 's/"/\&quot;/g'
}

#
# Xunit format report functions
_xunit_add_property()
{
	local name="$1"
	local value="${!name}"

	if [ ! -z "$value" ]; then
		echo -e "\t\t<property name=\"$name\" value=\"$value\"/>" >> $REPORT_DIR/result.xml
	fi
}
_xunit_make_section_report()
{
	# xfstest:section ==> xunit:testsuite
	local sect_name="$1"
	local tests_count="$2"
	local bad_count="$3"
	local notrun_count="$4"
	local sect_time="$5"
	local timestamp

	if [ $sect_name == '-no-sections-' ]; then
		sect_name='global'
	fi
	local report=$tmp.report.xunit.$sect_name.xml
	# Header
	echo "<?xml version=\"1.0\" encoding=\"UTF-8\"?>" > $REPORT_DIR/result.xml
	if [ -n "$test_start_time" ]; then
		timestamp="$(date -Iseconds --date="$test_start_time")"
	else
		timestamp="$(date -Iseconds)"
	fi

	local fstests_ns="https://git.kernel.org/pub/scm/fs/xfs/xfstests-dev.git"
	cat >> $REPORT_DIR/result.xml << ENDL
<testsuite
 xmlns="$fstests_ns"
 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
 xsi:schemaLocation="$fstests_ns $fstests_ns/tree/doc/xunit.xsd"

 name="xfstests"
 failures="$bad_count" skipped="$notrun_count" tests="$tests_count" time="$sect_time"
 hostname="$HOST"
 timestamp="$timestamp"
>
ENDL

	# Properties
	echo -e "\t<properties>" >> $REPORT_DIR/result.xml
	for p in "${REPORT_ENV_LIST[@]}"; do
		_xunit_add_property "$p"
	done
	echo -e "\t</properties>" >> $REPORT_DIR/result.xml
	if [ -f $report ]; then
		cat $report >> $REPORT_DIR/result.xml
	fi
	echo "</testsuite>" >> $REPORT_DIR/result.xml
	echo "Xunit report: $REPORT_DIR/result.xml"
}

_xunit_make_testcase_report()
{
	local sect_name="$1"
	local test_name="$2"
	local test_status="$3"
	local test_time="$4"
	local report_format="$5"
	local quiet

	if [ "$report_format" = xunit-quiet ]; then
		quiet=yes
	fi

	# TODO: other places may also win if no-section mode will be named like 'default/global'
	if [ $sect_name == '-no-sections-' ]; then
		sect_name='global'
	fi
	local report=$tmp.report.xunit.$sect_name.xml

	echo -e "\t<testcase classname=\"xfstests.$sect_name\" name=\"$test_name\" time=\"$test_time\">" >> $report
	case $test_status in
	"pass")
		;;
	"notrun")
		local notrun_file="${REPORT_DIR}/${test_name}.notrun"
		if [ -f "$notrun_file" ]; then
			local msg=`cat "$notrun_file" | encode_xml`
			echo -e "\t\t<skipped message=\"$msg\" />" >> $report
		else
			echo -e "\t\t<skipped/>" >> $report
		fi
		;;
	"list")
		echo -e "\t\t<skipped/>" >> $report
		;;
	"fail")
		local out_src="${SRC_DIR}/${test_name}.out"
		local full_file="${REPORT_DIR}/${test_name}.full"
		local dmesg_file="${REPORT_DIR}/${test_name}.dmesg"
		local outbad_file="${REPORT_DIR}/${test_name}.out.bad"
		if [ -z "$_err_msg" ]; then
			_err_msg="Test $test_name failed, reason unknown"
		fi
		echo -e "\t\t<failure message=\"$_err_msg\" type=\"TestFail\" />" >> $report
		if [ -z "$quiet" -a -s "$full_file" ]; then
			echo -e "\t\t<system-out>" >> $report
			printf	'<![CDATA[\n' >>$report
			cat "$full_file" | tr -dc '[:print:][:space:]' | encode_xml >>$report
			printf ']]>\n'	>>$report
			echo -e "\t\t</system-out>" >> $report
		fi
		if [ -n "$quiet" ]; then
		   :
		elif [ -f "$dmesg_file" ]; then
			echo -e "\t\t<system-err>" >> $report
			printf	'<![CDATA[\n' >>$report
			cat "$dmesg_file" | tr -dc '[:print:][:space:]' | encode_xml >>$report
			printf ']]>\n'	>>$report
			echo -e "\t\t</system-err>" >> $report
		elif [ -s "$outbad_file" ]; then
			echo -e "\t\t<system-err>" >> $report
			printf	'<![CDATA[\n' >>$report
			$diff "$out_src" "$outbad_file" | encode_xml >>$report
			printf ']]>\n'	>>$report
			echo -e "\t\t</system-err>" >> $report
		fi
		;;
	*)
		echo -e "\t\t<failure message=\"Unknown test_status=$test_status\" type=\"TestFail\"/>" >> $report
		;;
	esac
	echo -e "\t</testcase>" >> $report
}


#
#  Common report generator entry points
_make_section_report()
{
	local sect_name="$1"
	local tests_count="$2"
	local bad_count="$3"
	local notrun_count="$4"
	local sect_time="$5"
	for report in $REPORT_LIST; do
		case "$report" in
		"xunit"|"xunit-quiet")
			_xunit_make_section_report "$sect_name" "$tests_count" \
						   "$bad_count" "$notrun_count" \
						   "$sect_time"
			;;
		*)
			_dump_err "format '$report' is not supported"
			;;
		esac
	done
}

_make_testcase_report()
{
	local sect_name="$1"
	local test_seq="$2"
	local test_status="$3"
	local test_time="$4"
	for report in $REPORT_LIST; do
		case "$report" in
		"xunit"|"xunit-quiet")
			_xunit_make_testcase_report "$sect_name" "$test_seq" \
						    "$test_status" "$test_time" "$report"
			;;
		*)
			_dump_err "report format '$report' is not supported"
			;;
		esac
	done
}

_assert_report_list() {
	for report in $REPORT_LIST; do
		case "$report" in
		"xunit"|"xunit-quiet")
			;;
		*)
			_fatal "report format '$report' is not supported"
			;;
		esac
	done
}
